"<br>County: ", dmvCasesByCountyLinePlotly$County,
"<br>Cases: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = F) %>%
layout(yaxis = list(type = "log"),
#title = "DMV Covid-19 Cases & Case Rate by County",
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(TRUE), 15), rep(list(FALSE), 15))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(FALSE), 15), rep(list(TRUE), 15))),
label = "Per 100K")))
))
Sys.sleep(15)
dmvCasesByCountyBarPerCapPlotly <- DMV_Counties_Covid_Cases %>%
left_join(stateCountyPops, by = "FIPS") %>%
filter(Date == max(Date)) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
mutate(Case_Rate_100K = (Cases / TOTAL_POP_100K))
dmvCasesByCountyBarPlotlyGraph <- plot_ly(dmvCasesByCountyBarPerCapPlotly,
x = ~factor(State),
type = "bar",
color = ~factor(reorder(County, -Cases)),
colors = pals::glasbey()) %>%
add_trace(y = ~Cases,
hovertemplate = paste(
"State: ", dmvCasesByCountyBarPerCapPlotly$State,
"<br>County: ", dmvCasesByCountyBarPerCapPlotly$County,
"<br>Cases: ", "%{y}",
"<br>Date: ", dmvCasesByCountyBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Case_Rate_100K,
hovertemplate = paste(
"State: ", dmvCasesByCountyBarPerCapPlotly$State,
"<br>County: ", dmvCasesByCountyBarPerCapPlotly$County,
"<br>Cases: ", "%{y}",
"<br>Date: ", dmvCasesByCountyBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = F) %>%
layout(#title = paste("DMV Covid-19 Cases & Case Rate by County on", Sys.Date() - 1, sep = " "),
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(F), 15), rep(list(T), 15))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(T), 15), rep(list(F), 15))),
label = "Per 100K")))
))
Sys.sleep(15)
DMVTestsLinePerCapPlotly <- dailySummary %>%
drop_na(Tests) %>%
left_join(stateCountyPops, by = c("State" = "STNAME")) %>%
filter(SUMLEV == "040") %>%
mutate(Test_Rate_100K = (Tests / TOTAL_POP_100K))
dmvTestsByStateLinePlotlyGraph <- plot_ly(data = DMVTestsLinePerCapPlotly, x = ~Date) %>%
add_trace(y = ~Tests,
linetype = ~factor(State),
color = ~factor(State),
colors = c("#E91436", "#ebab00ff", "#00257C"),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", DMVTestsLinePerCapPlotly$State,
"<br>Tests: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Test_Rate_100K,
linetype = ~factor(State),
color = ~factor(State),
colors = c("#E91436", "#ebab00ff", "#00257C"),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", DMVTestsLinePerCapPlotly$State,
"<br>Tests: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = F) %>%
layout(#title = "DMV Covid-19 Tests & Test Rate by State",
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(TRUE), 3), rep(list(FALSE), 3))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(FALSE), 3), rep(list(TRUE), 3))),
label = "Per 100K")))
))
Sys.sleep(15)
DMVTestsBarPerCapPlotly <- dailySummary %>%
drop_na(Tests) %>%
filter(Date == max(Date)) %>%
left_join(stateCountyPops, by = c("State" = "STNAME")) %>%
filter(SUMLEV == "040") %>%
mutate(Test_Rate_100K = (Tests / TOTAL_POP_100K))
dmvTestsByStateBarPlotlyGraph <- plot_ly(DMVTestsBarPerCapPlotly,
x = ~factor(State),
type = "bar",
color = ~factor(State),
colors = c("#E91436", "#ebab00ff", "#00257C")) %>%
add_trace(y = ~Tests,
hovertemplate = paste(
"State: ", DMVTestsBarPerCapPlotly$State,
"<br>Tests: ", "%{y}",
"<br>Date: ", DMVTestsBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Test_Rate_100K,
hovertemplate = paste(
"State: ", DMVTestsBarPerCapPlotly$State,
"<br>Cases: ", "%{y}",
"<br>Date: ", DMVTestsBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = F) %>%
layout(#title = paste("DMV Covid-19 Tests & Test Rate by State on", Sys.Date() - 1, sep = " "),
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(F), 3), rep(list(T), 3))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(T), 3), rep(list(F), 3))),
label = "Per 100K")))
))
Sys.sleep(15)
dcmdvaDeathsLinePlotly <- DMV_Counties_Covid_Cases %>%
left_join(stateCountyPops, by = "FIPS") %>%
filter(Date >= as.Date("2020-04-02")) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
mutate(Death_Rate_100K = (Deaths / TOTAL_POP_100K))
dmvDeathsByCountyLinePlotlyGraph <- plot_ly(data = dcmdvaDeathsLinePlotly, x = ~Date) %>%
add_trace(y = ~Deaths,
linetype = ~factor(State),
color = ~factor(County),
colors = pals::glasbey(),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", dcmdvaDeathsLinePlotly$State,
"<br>County: ", dcmdvaDeathsLinePlotly$County,
"<br>Deaths: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Death_Rate_100K,
linetype = ~factor(State),
color = ~factor(County),
colors = pals::glasbey(),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", dcmdvaDeathsLinePlotly$State,
"<br>County: ", dcmdvaDeathsLinePlotly$County,
"<br>Deaths: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = F) %>%
layout(yaxis = list(type = "log"),
#title = "DMV Covid-19 Cases & Case Rate by County",
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(TRUE), 15), rep(list(FALSE), 15))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(FALSE), 15), rep(list(TRUE), 15))),
label = "Per 100K")))
))
Sys.sleep(15)
# dmvDeathsByStateLinePlotlyGraph <- plot_ly(data = dcmdvaDeathsLinePlotly, x = ~Date) %>%
#   add_trace(y = ~Deaths,
#             linetype = ~factor(State),
#             color = ~factor(State),
#             colors = c("#E91436", "#ebab00ff", "#00257C"),
#             mode = "lines+markers",
#             type = "scatter",
#             symbol = ~State,
#             hovertemplate = paste(
#               "State: ", dcmdvaDeathsLinePlotly$State,
#               "<br>Deaths: ", "%{y}",
#               "<br>Date: ", "%{x}",
#               "<extra></extra>"
#             ),
#             visible = T) %>%
#   add_trace(y = ~Death_Rate_100K,
#             linetype = ~factor(State),
#             color = ~factor(State),
#             colors = c("#E91436", "#ebab00ff", "#00257C"),
#             mode = "lines+markers",
#             type = "scatter",
#             symbol = ~State,
#             hovertemplate = paste(
#               "State: ", dcmdvaDeathsLinePlotly$State,
#               "<br>Deaths: ", "%{y}",
#               "<br>Date: ", "%{x}",
#               "<extra></extra>"
#             ),
#             visible = F) %>%
#   layout(#title = "DMV Covid-19 Deaths & Death Rate by State",
#          showlegend = F,
#          xaxis = list(title = ""),
#          updatemenus = list(
#            list(active = 0,
#                 buttons = list(
#                   list(method = "restyle",
#                        args = list("visible", append(rep(list(TRUE), 3), rep(list(FALSE), 3))),
#                        label = "Count"),
#                   list(method = "restyle",
#                        args = list("visible", append(rep(list(FALSE), 3), rep(list(TRUE), 3))),
#                        label = "Per 100K")))
#          ))
dmvDeathsByCountyBarPerCapPlotly <- DMV_Counties_Covid_Cases %>%
left_join(stateCountyPops, by = "FIPS") %>%
filter(Date == max(Date)) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
mutate(Death_Rate_100K = (Deaths / TOTAL_POP_100K))
dmvDeathsByCountyBarPlotlyGraph <- plot_ly(dmvDeathsByCountyBarPerCapPlotly,
x = ~factor(State),
type = "bar",
color = ~factor(reorder(County, -Deaths)),
colors = pals::glasbey()) %>%
add_trace(y = ~Death_Rate_100K,
hovertemplate = paste(
"State: ", dmvDeathsByCountyBarPerCapPlotly$State,
"<br>County: ", dmvDeathsByCountyBarPerCapPlotly$County,
"<br>Deaths: ", "%{y}",
"<br>Date: ", dmvDeathsByCountyBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = F) %>%
add_trace(y = ~Deaths,
hovertemplate = paste(
"State: ", dmvDeathsByCountyBarPerCapPlotly$State,
"<br>County: ", dmvDeathsByCountyBarPerCapPlotly$County,
"<br>Deaths: ", "%{y}",
"<br>Date: ", dmvDeathsByCountyBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = T) %>%
layout(#title = paste("DMV Covid-19 Cases & Case Rate by County on", Sys.Date() - 1, sep = " "),
yaxis = list(title = "Deaths"),
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(T), 15), rep(list(F), 15))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(F), 15), rep(list(T), 15))),
label = "Per 100K")))
))
# dcmdvaDeathsBarPlotly <- dailySummary %>%
#   drop_na(State) %>%
#   filter(Date == max(Date)) %>%
#   left_join(stateCountyPops, by = c("State" = "STNAME")) %>%
#   filter(SUMLEV == "040") %>%
#   mutate(Death_Rate_100K = as.double((Deaths / TOTAL_POP_100K)), Deaths = as.double(Deaths))
#
#
# dmvDeathsByStateBarPlotlyGraph <- plot_ly(dcmdvaDeathsBarPlotly,
#         x = ~factor(State),
#         type = "bar",
#         color = ~factor(State),
#         colors = c("#E91436", "#ebab00ff", "#00257C")) %>%
#   add_trace(y = ~Death_Rate_100K,
#             hovertemplate = paste(
#               "State: ", dcmdvaDeathsBarPlotly$State,
#               "<br>Deaths: ", "%{y}",
#               "<br>Date: ", dcmdvaDeathsBarPlotly$Date,
#               "<extra></extra>"
#             ),
#             visible = F) %>%
#     add_trace(y = ~Deaths,
#             hovertemplate = paste(
#               "State: ", dcmdvaDeathsBarPlotly$State,
#               "<br>Deaths: ", "%{y}",
#               "<br>Date: ", dcmdvaDeathsBarPlotly$Date,
#               "<extra></extra>"
#             ),
#             visible = T) %>%
#   layout(#title = paste("DMV Covid-19 Deaths & Death Rate by State on", Sys.Date() - 1, sep = " "),
#          xaxis = list(title = ""),
#          yaxis = list(title = "Deaths"),
#          showlegend = F,
#          updatemenus = list(
#            list(active = 0,
#                 buttons = list(
#                   list(method = "restyle",
#                        args = list("visible", append(rep(list(T), 3), rep(list(F), 3))),
#                        label = "Count"),
#                   list(method = "restyle",
#                        args = list("visible", append(rep(list(F), 3), rep(list(T), 3))),
#                        label = "Per 100K")))
#          ))
Sys.sleep(15)
#### DC Hospital Data ####
dcCovid19Hospitals <- dcCovid19Hospitals %>%
filter(Resource %in% c("ICU beds available", "Ventilators free"))
dcCovidHospitalLinePlotlyGraph <- plot_ly(data = dcCovid19Hospitals, x = ~Date) %>%
add_trace(y = ~Units,
color = ~factor(Resource),
colors = pals::glasbey(),
mode = "lines+markers",
type = "scatter",
hovertemplate = paste(
"Resource: ", dcCovid19Hospitals$Resource,
"<br>Units: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = T) %>%
layout(xaxis = list(
type = 'date',
tickformat = "%d %B",
title = ""
),
showlegend = T)
plotlyPlots <- list(dmvDeathsByCountyBarPlotlyGraph,
dmvDeathsByCountyLinePlotlyGraph,
dmvTestsByStateBarPlotlyGraph,
dmvTestsByStateLinePlotlyGraph,
dmvCasesByCountyBarPlotlyGraph,
dmvCasesByCountyLinePlotlyGraph,
dcCovidHospitalLinePlotlyGraph)
Sys.sleep(5)
plotlyPlots <- map(plotlyPlots, partial_bundle)
widget_file_size <- function(p) {
d <- tempdir()
withr::with_dir(d, htmlwidgets::saveWidget(p, "index.html"))
f <- file.path(d, "index.html")
mb <- round(file.info(f)$size / 1e6, 3)
message("File is: ", mb," MB")
}
Sys.sleep(5)
walk(plotlyPlots, widget_file_size)
Sys.sleep(5)
plotlyFileNames <- list("dmvDeathsByCountyBarPlotlyGraph.html",
"dmvDeathsByCountyLinePlotlyGraph.html",
"dmvTestsByStateBarPlotlyGraph.html",
"dmvTestsByStateLinePlotlyGraph.html",
"dmvCasesByCountyBarPlotlyGraph.html",
"dmvCasesByCountyLinePlotlyGraph.html",
"dcCovidHospitalLinePlotlyGraph.html")
# map2(plotlyPlots, plotlyFileNames, ~{saveWidget(.x, .y, selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")})
walk2(plotlyPlots, plotlyFileNames, ~{saveWidget(.x, .y, selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")})
april2020MovingViolations <- getMovingViolations(april2020MovingViolationsURL)
getMovingViolations <- function(url) {
server_response <- GET(url = url, user_agent("Adrian Nesta adriannesta@gmail.com This is for a blog post on Covid-19 impacts on MPD moving violations"))
if (http_error(server_response)) {
stop("The request to Open Data DC has failed")
}
data <- fromJSON(content(server_response, as = "text", encoding = "UTF-8"))
return(data)
}
april2020MovingViolations <- getMovingViolations(april2020MovingViolationsURL)
april2020MovingViolationsURL <- "https://opendata.arcgis.com/datasets/186e3b6cf45f44b1ac0fe750518e3cab_3.geojson"
march2020MovingViolationsURL <- "https://opendata.arcgis.com/datasets/6ceb38b8e24a464a94434c7d39934ebd_2.geojson"
february2020MovingViolationsURL <- "https://opendata.arcgis.com/datasets/c3e91eed970149e6a41853ddadf36394_1.geojson"
april2019MovingViolationsURL <- "https://opendata.arcgis.com/datasets/878e5e25b4fe47bbbbd3a37c77285a63_3.geojson"
march2019MovingViolationsURL <- "https://opendata.arcgis.com/datasets/0e38e123d4414d37905d0bd64af456ad_2.geojson"
february2019MovingViolationsURL <- "https://opendata.arcgis.com/datasets/a03b8a80a06e4451951497dee78959ab_1.geojson"
april2020MovingViolations <- getMovingViolations(april2020MovingViolationsURL)
library(jsonlite)
april2020MovingViolations <- getMovingViolations(april2020MovingViolationsURL)
nrow(april2020MovingViolations$features$properties)
table(april2020MovingViolations$features$properties$VIOLATION_PROCESS_DESC)
march2020MovingViolations <- getMovingViolations(march2020MovingViolationsURL)
nrow(march2020MovingViolations$features$properties)
table(march2020MovingViolations$features$properties$VIOLATION_PROCESS_DESC)
dcMovingViolationsURLs <- c("https://opendata.arcgis.com/datasets/186e3b6cf45f44b1ac0fe750518e3cab_3.geojson",
"https://opendata.arcgis.com/datasets/6ceb38b8e24a464a94434c7d39934ebd_2.geojson",
"https://opendata.arcgis.com/datasets/c3e91eed970149e6a41853ddadf36394_1.geojson",
"https://opendata.arcgis.com/datasets/878e5e25b4fe47bbbbd3a37c77285a63_3.geojson",
"https://opendata.arcgis.com/datasets/0e38e123d4414d37905d0bd64af456ad_2.geojson",
"https://opendata.arcgis.com/datasets/a03b8a80a06e4451951497dee78959ab_1.geojson")
dcMovingViolationsDFNames <- c("april2020MovingViolations",
"march2020MovingViolations",
"february2020MovingViolations",
"april2019MovingViolations",
"march2019MovingViolations",
"february2019MovingViolations")
map2_df(dcMovingViolationsURLs, dcMovingViolationsDFNames, ~ {
assign(.y, getMovingViolations(.x)$features$properties)
})
dcMovingViolationsDFNames[1]
assign(dcMovingViolationsDFNames[1], 3)
dcMovingViolationsDFNames[1]
assign(dcMovingViolationsDFNames[1], getMovingViolations(dcMovingViolationsURLs[1])$features$properties)
april2020MovingViolations
?map_df
rerun(6, rnorm(100))
rerun(6, rnorm(100)) %>% map_df(~ {data_frame(x = .x)})
rerun(6, rnorm(100)) %>% map_df(~ {tibble(x = .x)})
rerun(6, rnorm(100)) %>% map_df(~ {tibble(x = .x), .id = "dist"})
rerun(6, rnorm(100)) %>% map_df(~ {data_frame(x = .x), .id = "dist"})
rerun(6, rnorm(100)) %>% map_df(
~tibble(x = .x), .id = "dist"
)
rerun(6, rnorm(100)) %>% map_df(
~tibble(x = .x), .id = "dist"
) ggplot +
aes(
x = x,
fill = dist
) +
geom_histogram() +
facet_wrap(
~dist,
ncol = 2)
library(ggplot2)
rerun(6, rnorm(100)) %>% map_df(
~tibble(x = .x), .id = "dist"
) %>% ggplot +
aes(
x = x,
fill = dist
) +
geom_histogram() +
facet_wrap(
~dist,
ncol = 2)
map2(dcMovingViolationsURLs, dcMovingViolationsDFNames, ~ {
assign(.y, getMovingViolations(.x)$features$properties)
})
map2(dcMovingViolationsURLs, dcMovingViolationsDFNames, ~ {
assign(.y, getMovingViolations(.x)$features$properties), Sys.sleep(5)
})
map2(dcMovingViolationsURLs, dcMovingViolationsDFNames, ~ {
assign(.y, getMovingViolations(.x)$features$properties), Sys.sleep(5)
})
?map2
getMovingViolations <- function(url) {
server_response <- GET(url = url, user_agent("Adrian Nesta adriannesta@gmail.com This is for a blog post on Covid-19 impacts on MPD moving violations"))
if (http_error(server_response)) {
stop("The request to Open Data DC has failed")
}
data <- fromJSON(content(server_response, as = "text", encoding = "UTF-8"))
Sys.sleep(5)
return(data)
}
map2(dcMovingViolationsURLs, dcMovingViolationsDFNames, ~ {
assign(.y, getMovingViolations(.x)$features$properties)
})
getMovingViolations <- function(url) {
Sys.sleep(5)
server_response <- GET(url = url, user_agent("Adrian Nesta adriannesta@gmail.com This is for a blog post on Covid-19 impacts on MPD moving violations"))
if (http_error(server_response)) {
stop("The request to Open Data DC has failed")
}
Sys.sleep(5)
data <- fromJSON(content(server_response, as = "text", encoding = "UTF-8"))
return(data)
}
map2(dcMovingViolationsURLs, dcMovingViolationsDFNames, ~ {
assign(.y, getMovingViolations(.x)$features$properties)
})
rm(april2020MovingViolations, march2020MovingViolations)
map2(dcMovingViolationsURLs, dcMovingViolationsDFNames, ~ {
assign(.y, getMovingViolations(.x)$features$properties)
})
walk2(dcMovingViolationsURLs, dcMovingViolationsDFNames, ~ {
assign(.y, getMovingViolations(.x)$features$properties)
})
walk2(dcMovingViolationsURLs, dcMovingViolationsDFNames, ~ {
assign(.y, getMovingViolations(.x)$features$properties)
})
assign(dcMovingViolationsDFNames[1], getMovingViolations(dcMovingViolationsURLs[1])$features$properties)
View(april2020MovingViolations)
rm(april2020MovingViolations)
walk2(dcMovingViolationsURLs, dcMovingViolationsDFNames, ~ {
.y <- getMovingViolations(.x)$features$properties
})
seq_along(dcMovingViolationsDFNames)
for (i in seq_along(dcMovingViolationsDFNames)) {
assign(dcMovingViolationsDFNames[i], getMovingViolations(dcMovingViolationsURLs[i])$features$properties)
}
