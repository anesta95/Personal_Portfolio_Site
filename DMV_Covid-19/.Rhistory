ggsave(filename = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19/DMVTestsBar.png", plot = DMVTestsBar, width = 300, height = 275, units = 'mm')
Sys.sleep(5)
#
DMVTestsBarPerCap <- dailySummary %>%
drop_na(Tests) %>%
filter(Date == max(Date)) %>%
left_join(stateCountyPops, by = c("State" = "STNAME")) %>%
filter(SUMLEV == "040") %>%
ggplot(aes(x = State, y = round((Tests / TOTAL_POP_100K), 1)))  +
geom_col(aes(fill = State), na.rm = T) +
geom_text(aes(label = round((Tests / TOTAL_POP_100K), 1)), vjust = -0.2, size = 8) +
scale_fill_manual(values = c("#E91436", "#ebab00ff", "#00257C")) +
covid19Theme() +
labs(title = "DMV Covid-19 test rate", subtitle = paste("On", paste0(Sys.Date() - 1, ","), "per 100k residents", sep = " "), caption = ggplotCaption) + xlab("") + ylab("")
ggsave(filename = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19/DMVTestsBarPerCap.png", plot = DMVTestsBarPerCap, width = 300, height = 275, units = 'mm')
Sys.sleep(5)
# ### Line Chart of death totals by state over time
dcmdvaDeathsLine <- dailySummary %>%
drop_na(State) %>%
ggplot(aes(x = Date, y = Deaths)) +
geom_line(aes(color = State), na.rm = T, size = 3) +
geom_point(aes(color = State, shape = State), na.rm = T, size = 6) +
scale_color_manual(values = c("#E91436", "#EBAB00", "#00257C")) +
scale_y_continuous(breaks = seq(min(dailySummary$Deaths, na.rm = T), max(dailySummary$Deaths, na.rm = T), by = 6)) +
covid19Theme() +
labs(title = "DMV Covid-19 deaths", subtitle = "Over time", caption = ggplotCaption) + xlab("") + ylab("")
ggsave(filename = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19/dcmdvaDeathsLine.png", plot = dcmdvaDeathsLine, width = 300, height = 275, units = 'mm')
Sys.sleep(5)
# ### Bar Chart of latest death totals by State
#
dcmdvaDeathsBar <- dailySummary %>%
drop_na(State) %>%
filter(Date == max(Date)) %>%
ggplot(aes(x = State, y = Deaths)) +
geom_col(aes(fill = State), na.rm = T) +
geom_text(aes(label = Deaths), vjust = -0.2, size = 8) +
scale_fill_manual(values = c("#E91436", "#EBAB00", "#00257C")) +
covid19Theme() +
labs(title = "DMV Covid-19 deaths", subtitle = paste("On", Sys.Date() - 1, sep = " "), caption = ggplotCaption) + xlab("") + ylab("")
ggsave(filename = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19/dcmdvaDeathsBar.png", plot = dcmdvaDeathsBar, width = 300, height = 275, units = 'mm')
Sys.sleep(5)
#
# ### Chloropleth of Washington Metro Area Counties by Cases
# Read in shapfile of US counties
counties <- st_read("/home/adrian/Documents/US_County_Shapfile_Population/tl_2019_us_county.shp")
# Make dataframe of DMV counties and join in their populations for per-capita calculations
DMV <- counties %>%
mutate(GEOID = as.character(GEOID), NAME = as.character(NAME)) %>%
filter(GEOID %in% DMV_FIPS) %>%
left_join(stateCountyPops, by = c("GEOID" = "FIPS"))
# Fix Fairfax city name error
DMV[DMV$GEOID == "51600",]$NAME <- "Fairfax City"
# plot(st_geometry(DMV))
# Get only today's DMV Covid-19 cases by county
DMV_Counties_Covid_Cases_Today <- DMV_Counties_Covid_Cases %>%
filter(Date == max(Date))
# Join
DMV_Cases <- DMV %>%
left_join(DMV_Counties_Covid_Cases_Today, by = c("GEOID" = "FIPS"))
# Fill NAs with 0
DMV_Cases <- DMV_Cases %>%
mutate(Cases = if_else(is.na(Cases), 0, Cases))
# Assign new projection
st_crs(DMV_Cases) <- "+proj=longlat +datum=WGS84"
# No longer making this static plot, making a leaflet one!
# DMV_Cases %>%
#   ggplot() +
#   geom_sf(aes(fill = Cases)) +
#   scale_fill_gradient(low = "#fee0d2", high = "#de2d26")
#
# ### Chloropleth of Washington Metro Area Counties by Cases
#myBins <- round(c(as.integer(unname(quantile(DMV_Cases$Cases, na.rm = T))), Inf), 0)
# Create cases and per cap case rate bins and palettes
myBinsReg <- round(seq(from = 0, to = (max(DMV_Cases$Cases) + 1), by = (max(DMV_Cases$Cases) / 6)), 0)
upperPerCapBoundary <- round(max(DMV_Cases$Cases / DMV_Cases$TOTAL_POP_100K) + 1, 0)
while(upperPerCapBoundary %% 6 != 0) {
upperPerCapBoundary = upperPerCapBoundary + 1
}
myBinsPerCap <- seq(from = 0,
to = upperPerCapBoundary,
by = upperPerCapBoundary / 6)
dmvPaletteReg <- colorBin(palette = "YlOrRd", domain = DMV_Cases$Cases, na.color = "transparent", bins = myBinsReg)
dmvPalettePerCap <- colorBin(palette = "YlOrRd", domain = DMV_Cases$Cases, na.color = "transparent", bins = myBinsPerCap)
Sys.sleep(15)
# Create tool tip legend text
legendText <- paste0(
"County: ", DMV_Cases$NAME, "<br/>",
"State: ", DMV_Cases$State, "<br/>",
"Cases: ", DMV_Cases$Cases, "<br/>"
) %>%
lapply(htmltools::HTML)
# Make the per capita leaflet chloropleth
legendTextPerCap <- paste0(
"County: ", DMV_Cases$NAME, "<br/>",
"State: ", DMV_Cases$State, "<br/>",
"Rate per 100K: ", round((DMV_Cases$Cases / DMV_Cases$TOTAL_POP_100K), 1), "<br/>"
) %>%
lapply(htmltools::HTML)
attribution <- htmltools::HTML("Map data &copy; <a href='https://www.openstreetmap.org/'>OpenStreetMap</a> contributors, <a href='https://creativecommons.org/licenses/by-sa/2.0/'>CC-BY-SA</a><br/>Data from: <a href = 'https://dhhr.wv.gov/COVID-19/Pages/default.aspx'>WV DHHR</a>, <a href='https://coronavirus.dc.gov/page/coronavirus-data'>DC Mayor's Office</a>, <a href='https://coronavirus.maryland.gov/'>MD Dept of Health</a>, <a href='http://www.vdh.virginia.gov/coronavirus/'>VA Dept of Health</a>")
leaflet(DMV_Cases) %>%
addTiles(attribution = attribution) %>%
setView(lat = "38.87086", lng = "-77.13826", zoom = 8) %>%
addPolygons(stroke=T,
opacity = 1,
fillOpacity = 0.9,
smoothFactor = 0.5,
color = "black",
fillColor = ~dmvPaletteReg(Cases),
weight = 0.5,
label = legendText,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
),
group = paste("Case count", Sys.Date() - 1, sep = " ")) %>%
addPolygons(stroke=T,
opacity = 1,
fillOpacity = 0.9,
smoothFactor = 0.5,
color = "black",
fillColor = ~dmvPalettePerCap((Cases / TOTAL_POP_100K)),
weight = 0.5,
label = legendTextPerCap,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
),
group = paste("Case rate per 100K", Sys.Date() - 1, sep = " ")) %>%
addLegend( pal=dmvPaletteReg,
values=~Cases,
opacity=0.9,
title = paste("Case count", Sys.Date() - 1, sep = " "),
position = "topright",
group = paste("Case count", Sys.Date() - 1, sep = " ")) %>%
addLegend( pal=dmvPalettePerCap,
values=~(Cases / TOTAL_POP_100K),
opacity=0.9,
title = paste("Case rate per 100K", Sys.Date() - 1, sep = " "),
position = "topright",
group = paste("Case rate per 100K", Sys.Date() - 1, sep = " ")) %>%
addLayersControl(baseGroups = c(paste("Case count", Sys.Date() - 1, sep = " "), paste("Case rate per 100K", Sys.Date() - 1, sep = " ")),
position = "topright",
options = layersControlOptions(collapsed = F)) %>%
htmlwidgets::onRender(
"function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.children[0].children[0].innerText == selectedGroup) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', e => updateLegend());
}"
)
dmvChloropleth <- leaflet(DMV_Cases) %>%
addTiles(attribution = attribution) %>%
setView(lat = "38.87086", lng = "-77.13826", zoom = 8) %>%
addPolygons(stroke=T,
opacity = 1,
fillOpacity = 0.9,
smoothFactor = 0.5,
color = "black",
fillColor = ~dmvPaletteReg(Cases),
weight = 0.5,
label = legendText,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
),
group = paste("Case count", Sys.Date() - 1, sep = " ")) %>%
addPolygons(stroke=T,
opacity = 1,
fillOpacity = 0.9,
smoothFactor = 0.5,
color = "black",
fillColor = ~dmvPalettePerCap((Cases / TOTAL_POP_100K)),
weight = 0.5,
label = legendTextPerCap,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
),
group = paste("Case rate per 100K", Sys.Date() - 1, sep = " ")) %>%
addLegend( pal=dmvPaletteReg,
values=~Cases,
opacity=0.9,
title = paste("Case count", Sys.Date() - 1, sep = " "),
position = "topright",
group = paste("Case count", Sys.Date() - 1, sep = " ")) %>%
addLegend( pal=dmvPalettePerCap,
values=~(Cases / TOTAL_POP_100K),
opacity=0.9,
title = paste("Case rate per 100K", Sys.Date() - 1, sep = " "),
position = "topright",
group = paste("Case rate per 100K", Sys.Date() - 1, sep = " ")) %>%
addLayersControl(baseGroups = c(paste("Case count", Sys.Date() - 1, sep = " "), paste("Case rate per 100K", Sys.Date() - 1, sep = " ")),
position = "topright",
options = layersControlOptions(collapsed = F)) %>%
htmlwidgets::onRender(
"function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.children[0].children[0].innerText == selectedGroup) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', e => updateLegend());
}"
)
Sys.sleep(5)
setwd("/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
Sys.sleep(15)
mapshot(dmvChloropleth, url = "dmvChloropleth.html")
Sys.sleep(15)
### Look into plotly plots with Rplotly below
# plotlyExample <- ggplotly(dmvCasesByCountyLine)
# htmlwidgets::saveWidget(plotlyExample, file = "plotlyExample.html", selfcontained = F, libdir = getwd())
dmvCasesByCountyLinePlotly <- DMV_Counties_Covid_Cases %>%
left_join(stateCountyPops, by = "FIPS") %>%
filter(Date >= as.Date("2020-03-23")) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
mutate(Case_Rate_100K = (Cases / TOTAL_POP_100K))
## This pretty much works! I need to get it to display only one option on rendering
# https://stackoverflow.com/questions/42081811/plotly-drop-down-menu-not-restyling-y-correctly
### This works!!!
dmvCasesByCountyLinePlotlyGraph <- plot_ly(data = dmvCasesByCountyLinePlotly, x = ~Date) %>%
add_trace(y = ~Cases,
linetype = ~factor(State),
color = ~factor(County),
colors = "Set3",
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", dmvCasesByCountyLinePlotly$State,
"<br>County: ", dmvCasesByCountyLinePlotly$County,
"<br>Cases: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Case_Rate_100K,
linetype = ~factor(State),
color = ~factor(County),
colors = "Set3",
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", dmvCasesByCountyLinePlotly$State,
"<br>County: ", dmvCasesByCountyLinePlotly$County,
"<br>Cases: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = F) %>%
layout(yaxis = list(type = "log"),
title = "DMV Covid-19 Cases & Case Rate by County",
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(TRUE), 12), rep(list(FALSE), 12))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(FALSE), 12), rep(list(TRUE), 12))),
label = "Per 100K")))
))
Sys.sleep(5)
dmvCasesByCountyBarPerCapPlotly <- DMV_Counties_Covid_Cases %>%
left_join(stateCountyPops, by = "FIPS") %>%
filter(Date == max(Date)) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
mutate(Case_Rate_100K = (Cases / TOTAL_POP_100K))
dmvCasesByCountyBarPlotlyGraph <- plot_ly(dmvCasesByCountyBarPerCapPlotly,
x = ~factor(State),
type = "bar",
color = ~factor(reorder(County, -Cases)),
colors = "Set3") %>%
add_trace(y = ~Cases,
hovertemplate = paste(
"State: ", dmvCasesByCountyBarPerCapPlotly$State,
"<br>County: ", dmvCasesByCountyBarPerCapPlotly$County,
"<br>Cases: ", "%{y}",
"<br>Date: ", dmvCasesByCountyBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Case_Rate_100K,
hovertemplate = paste(
"State: ", dmvCasesByCountyBarPerCapPlotly$State,
"<br>County: ", dmvCasesByCountyBarPerCapPlotly$County,
"<br>Cases: ", "%{y}",
"<br>Date: ", dmvCasesByCountyBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = F) %>%
layout(title = paste("DMV Covid-19 Cases & Case Rate by County on", Sys.Date() - 1, sep = " "),
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(F), 12), rep(list(T), 12))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(T), 12), rep(list(F), 12))),
label = "Per 100K")))
))
Sys.sleep(5)
DMVTestsLinePerCapPlotly <- dailySummary %>%
drop_na(Tests) %>%
left_join(stateCountyPops, by = c("State" = "STNAME")) %>%
filter(SUMLEV == "040") %>%
mutate(Test_Rate_100K = (Tests / TOTAL_POP_100K))
dmvTestsByStateLinePlotlyGraph <- plot_ly(data = DMVTestsLinePerCapPlotly, x = ~Date) %>%
add_trace(y = ~Tests,
linetype = ~factor(State),
color = ~factor(State),
colors = c("#E91436", "#ebab00ff", "#00257C"),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", DMVTestsLinePerCapPlotly$State,
"<br>Tests: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Test_Rate_100K,
linetype = ~factor(State),
color = ~factor(State),
colors = c("#E91436", "#ebab00ff", "#00257C"),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", DMVTestsLinePerCapPlotly$State,
"<br>Tests: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = F) %>%
layout(title = "DMV Covid-19 Tests & Test Rate by State",
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(TRUE), 3), rep(list(FALSE), 3))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(FALSE), 3), rep(list(TRUE), 3))),
label = "Per 100K")))
))
Sys.sleep(5)
DMVTestsBarPerCapPlotly <- dailySummary %>%
drop_na(Tests) %>%
filter(Date == max(Date)) %>%
left_join(stateCountyPops, by = c("State" = "STNAME")) %>%
filter(SUMLEV == "040") %>%
mutate(Test_Rate_100K = (Tests / TOTAL_POP_100K))
dmvTestsByStateBarPlotlyGraph <- plot_ly(DMVTestsBarPerCapPlotly,
x = ~factor(State),
type = "bar",
color = ~factor(State),
colors = c("#E91436", "#ebab00ff", "#00257C")) %>%
add_trace(y = ~Tests,
hovertemplate = paste(
"State: ", DMVTestsBarPerCapPlotly$State,
"<br>Tests: ", "%{y}",
"<br>Date: ", DMVTestsBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Test_Rate_100K,
hovertemplate = paste(
"State: ", DMVTestsBarPerCapPlotly$State,
"<br>Cases: ", "%{y}",
"<br>Date: ", DMVTestsBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = F) %>%
layout(title = paste("DMV Covid-19 Tests & Test Rate by State on", Sys.Date() - 1, sep = " "),
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(F), 3), rep(list(T), 3))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(T), 3), rep(list(F), 3))),
label = "Per 100K")))
))
Sys.sleep(5)
dcmdvaDeathsLinePlotly <- dailySummary %>%
drop_na(State) %>%
left_join(stateCountyPops, by = c("State" = "STNAME")) %>%
filter(SUMLEV == "040") %>%
mutate(Death_Rate_100K = (Deaths / TOTAL_POP_100K))
dmvDeathsByStateLinePlotlyGraph <- plot_ly(data = dcmdvaDeathsLinePlotly, x = ~Date) %>%
add_trace(y = ~Deaths,
linetype = ~factor(State),
color = ~factor(State),
colors = c("#E91436", "#ebab00ff", "#00257C"),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", dcmdvaDeathsLinePlotly$State,
"<br>Deaths: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Death_Rate_100K,
linetype = ~factor(State),
color = ~factor(State),
colors = c("#E91436", "#ebab00ff", "#00257C"),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", dcmdvaDeathsLinePlotly$State,
"<br>Deaths: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = F) %>%
layout(title = "DMV Covid-19 Deaths & Death Rate by State",
showlegend = F,
xaxis = list(title = ""),
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(TRUE), 3), rep(list(FALSE), 3))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(FALSE), 3), rep(list(TRUE), 3))),
label = "Per 100K")))
))
Sys.sleep(5)
dcmdvaDeathsBarPlotly <- dailySummary %>%
drop_na(State) %>%
filter(Date == max(Date)) %>%
left_join(stateCountyPops, by = c("State" = "STNAME")) %>%
filter(SUMLEV == "040") %>%
mutate(Death_Rate_100K = as.double((Deaths / TOTAL_POP_100K)), Deaths = as.double(Deaths))
dmvDeathsByStateBarPlotlyGraph <- plot_ly(dcmdvaDeathsBarPlotly,
x = ~factor(State),
type = "bar",
color = ~factor(State),
colors = c("#E91436", "#ebab00ff", "#00257C")) %>%
add_trace(y = ~Death_Rate_100K,
hovertemplate = paste(
"State: ", dcmdvaDeathsBarPlotly$State,
"<br>Deaths: ", "%{y}",
"<br>Date: ", dcmdvaDeathsBarPlotly$Date,
"<extra></extra>"
),
visible = F) %>%
add_trace(y = ~Deaths,
hovertemplate = paste(
"State: ", dcmdvaDeathsBarPlotly$State,
"<br>Deaths: ", "%{y}",
"<br>Date: ", dcmdvaDeathsBarPlotly$Date,
"<extra></extra>"
),
visible = T) %>%
layout(title = paste("DMV Covid-19 Deaths & Death Rate by State on", Sys.Date() - 1, sep = " "),
xaxis = list(title = ""),
yaxis = list(title = "Deaths"),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(T), 3), rep(list(F), 3))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(F), 3), rep(list(T), 3))),
label = "Per 100K")))
))
Sys.sleep(5)
plotlyPlots <- list(dmvDeathsByStateBarPlotlyGraph, dmvDeathsByStateLinePlotlyGraph, dmvTestsByStateBarPlotlyGraph, dmvTestsByStateLinePlotlyGraph, dmvCasesByCountyBarPlotlyGraph, dmvCasesByCountyLinePlotlyGraph)
saveWidget(dmvDeathsByStateBarPlotlyGraph, "dmvDeathsByStateBarPlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
Sys.sleep(5)
saveWidget(dmvDeathsByStateLinePlotlyGraph, "dmvDeathsByStateLinePlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
Sys.sleep(5)
saveWidget(dmvTestsByStateBarPlotlyGraph, "dmvTestsByStateBarPlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
Sys.sleep(5)
saveWidget(dmvTestsByStateLinePlotlyGraph, "dmvTestsByStateLinePlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
Sys.sleep(5)
saveWidget(dmvCasesByCountyBarPlotlyGraph, "dmvCasesByCountyBarPlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
Sys.sleep(5)
saveWidget(dmvCasesByCountyLinePlotlyGraph, "dmvCasesByCountyLinePlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
