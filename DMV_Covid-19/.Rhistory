weight = 0.5,
label = legendText,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
),
group = paste("Case count", Sys.Date() - 1, sep = " ")) %>%
addPolygons(stroke=T,
opacity = 1,
fillOpacity = 0.9,
smoothFactor = 0.5,
color = "black",
fillColor = ~dmvPalettePerCap((Cases / TOTAL_POP_100K)),
weight = 0.5,
label = legendTextPerCap,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
),
group = paste("Case rate per 100K", Sys.Date() - 1, sep = " ")) %>%
addPolygons(stroke=T,
opacity = 1,
fillOpacity = 0.9,
smoothFactor = 0.5,
color = "black",
fillColor = ~dmvDeathPalette(Deaths),
weight = 0.5,
label = deathsLegendText,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
),
group = paste("Death toll on", Sys.Date() - 1, sep = " ")) %>%
addPolygons(stroke=T,
opacity = 1,
fillOpacity = 0.9,
smoothFactor = 0.5,
color = "black",
fillColor = ~dmvDeathPalettePerCap((Deaths / TOTAL_POP_100K)),
weight = 0.5,
label = deathsPerCapLegendText,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
),
group = paste("Death rate per 100K", Sys.Date() - 1, sep = " ")) %>%
addLegend( pal=dmvPaletteReg,
values=~Cases,
opacity=0.9,
title = paste("Case count", Sys.Date() - 1, sep = " "),
position = "topright",
group = paste("Case count", Sys.Date() - 1, sep = " ")) %>%
addLegend( pal=dmvPalettePerCap,
values=~(Cases / TOTAL_POP_100K),
opacity=0.9,
title = paste("Case rate per 100K", Sys.Date() - 1, sep = " "),
position = "topright",
group = paste("Case rate per 100K", Sys.Date() - 1, sep = " ")) %>%
addLegend( pal=dmvDeathPalette,
values=~Deaths,
opacity=0.9,
title = paste("Death toll on", Sys.Date() - 1, sep = " "),
position = "topright",
group = paste("Death toll on", Sys.Date() - 1, sep = " ")) %>%
addLegend( pal=dmvDeathPalettePerCap,
values=~(Deaths / TOTAL_POP_100K),
opacity=0.9,
title = paste("Death rate per 100K", Sys.Date() - 1, sep = " "),
position = "topright",
group = paste("Death rate per 100K", Sys.Date() - 1, sep = " ")) %>%
addLayersControl(baseGroups = c(paste("Case count", Sys.Date() - 1, sep = " "),
paste("Case rate per 100K", Sys.Date() - 1, sep = " "),
paste("Death toll on", Sys.Date() - 1, sep = " "),
paste("Death rate per 100K", Sys.Date() - 1, sep = " ")),
position = "topright",
options = layersControlOptions(collapsed = F)) %>%
htmlwidgets::onRender(
"function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.children[0].children[0].innerText == selectedGroup) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', e => updateLegend());
}"
)
Sys.sleep(15)
setwd("/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
Sys.sleep(15)
mapshot(dmvChloropleth, url = "dmvChloropleth.html")
Sys.sleep(15)
dmvCasesByCountyLinePlotly <- DMV_Counties_Covid_Cases %>%
left_join(stateCountyPops, by = "FIPS") %>%
filter(Date >= as.Date("2020-03-23")) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
mutate(Case_Rate_100K = (Cases / TOTAL_POP_100K))
## This pretty much works! I need to get it to display only one option on rendering
# https://stackoverflow.com/questions/42081811/plotly-drop-down-menu-not-restyling-y-correctly
### This works!!!
dmvCasesByCountyLinePlotlyGraph <- plot_ly(data = dmvCasesByCountyLinePlotly, x = ~Date) %>%
add_trace(y = ~Cases,
linetype = ~factor(State),
color = ~factor(County),
colors = pals::glasbey(),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", dmvCasesByCountyLinePlotly$State,
"<br>County: ", dmvCasesByCountyLinePlotly$County,
"<br>Cases: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Case_Rate_100K,
linetype = ~factor(State),
color = ~factor(County),
colors = pals::glasbey(),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", dmvCasesByCountyLinePlotly$State,
"<br>County: ", dmvCasesByCountyLinePlotly$County,
"<br>Cases: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = F) %>%
layout(yaxis = list(type = "log"),
#title = "DMV Covid-19 Cases & Case Rate by County",
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(TRUE), 15), rep(list(FALSE), 15))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(FALSE), 15), rep(list(TRUE), 15))),
label = "Per 100K")))
))
Sys.sleep(15)
dmvCasesByCountyBarPerCapPlotly <- DMV_Counties_Covid_Cases %>%
left_join(stateCountyPops, by = "FIPS") %>%
filter(Date == max(Date)) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
mutate(Case_Rate_100K = (Cases / TOTAL_POP_100K))
dmvCasesByCountyBarPlotlyGraph <- plot_ly(dmvCasesByCountyBarPerCapPlotly,
x = ~factor(State),
type = "bar",
color = ~factor(reorder(County, -Cases)),
colors = pals::glasbey()) %>%
add_trace(y = ~Cases,
hovertemplate = paste(
"State: ", dmvCasesByCountyBarPerCapPlotly$State,
"<br>County: ", dmvCasesByCountyBarPerCapPlotly$County,
"<br>Cases: ", "%{y}",
"<br>Date: ", dmvCasesByCountyBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Case_Rate_100K,
hovertemplate = paste(
"State: ", dmvCasesByCountyBarPerCapPlotly$State,
"<br>County: ", dmvCasesByCountyBarPerCapPlotly$County,
"<br>Cases: ", "%{y}",
"<br>Date: ", dmvCasesByCountyBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = F) %>%
layout(#title = paste("DMV Covid-19 Cases & Case Rate by County on", Sys.Date() - 1, sep = " "),
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(F), 15), rep(list(T), 15))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(T), 15), rep(list(F), 15))),
label = "Per 100K")))
))
Sys.sleep(15)
DMVTestsLinePerCapPlotly <- dailySummary %>%
drop_na(Tests) %>%
left_join(stateCountyPops, by = c("State" = "STNAME")) %>%
filter(SUMLEV == "040") %>%
mutate(Test_Rate_100K = (Tests / TOTAL_POP_100K))
dmvTestsByStateLinePlotlyGraph <- plot_ly(data = DMVTestsLinePerCapPlotly, x = ~Date) %>%
add_trace(y = ~Tests,
linetype = ~factor(State),
color = ~factor(State),
colors = c("#E91436", "#ebab00ff", "#00257C"),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", DMVTestsLinePerCapPlotly$State,
"<br>Tests: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Test_Rate_100K,
linetype = ~factor(State),
color = ~factor(State),
colors = c("#E91436", "#ebab00ff", "#00257C"),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", DMVTestsLinePerCapPlotly$State,
"<br>Tests: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = F) %>%
layout(#title = "DMV Covid-19 Tests & Test Rate by State",
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(TRUE), 3), rep(list(FALSE), 3))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(FALSE), 3), rep(list(TRUE), 3))),
label = "Per 100K")))
))
Sys.sleep(15)
DMVTestsBarPerCapPlotly <- dailySummary %>%
drop_na(Tests) %>%
filter(Date == max(Date)) %>%
left_join(stateCountyPops, by = c("State" = "STNAME")) %>%
filter(SUMLEV == "040") %>%
mutate(Test_Rate_100K = (Tests / TOTAL_POP_100K))
dmvTestsByStateBarPlotlyGraph <- plot_ly(DMVTestsBarPerCapPlotly,
x = ~factor(State),
type = "bar",
color = ~factor(State),
colors = c("#E91436", "#ebab00ff", "#00257C")) %>%
add_trace(y = ~Tests,
hovertemplate = paste(
"State: ", DMVTestsBarPerCapPlotly$State,
"<br>Tests: ", "%{y}",
"<br>Date: ", DMVTestsBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Test_Rate_100K,
hovertemplate = paste(
"State: ", DMVTestsBarPerCapPlotly$State,
"<br>Cases: ", "%{y}",
"<br>Date: ", DMVTestsBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = F) %>%
layout(#title = paste("DMV Covid-19 Tests & Test Rate by State on", Sys.Date() - 1, sep = " "),
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(F), 3), rep(list(T), 3))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(T), 3), rep(list(F), 3))),
label = "Per 100K")))
))
Sys.sleep(15)
dcmdvaDeathsLinePlotly <- DMV_Counties_Covid_Cases %>%
left_join(stateCountyPops, by = "FIPS") %>%
filter(Date >= as.Date("2020-04-02")) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
mutate(Death_Rate_100K = (Deaths / TOTAL_POP_100K))
dmvDeathsByCountyLinePlotlyGraph <- plot_ly(data = dcmdvaDeathsLinePlotly, x = ~Date) %>%
add_trace(y = ~Deaths,
linetype = ~factor(State),
color = ~factor(County),
colors = pals::glasbey(),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", dcmdvaDeathsLinePlotly$State,
"<br>County: ", dcmdvaDeathsLinePlotly$County,
"<br>Deaths: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Death_Rate_100K,
linetype = ~factor(State),
color = ~factor(County),
colors = pals::glasbey(),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", dcmdvaDeathsLinePlotly$State,
"<br>County: ", dcmdvaDeathsLinePlotly$County,
"<br>Deaths: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = F) %>%
layout(yaxis = list(type = "log"),
#title = "DMV Covid-19 Cases & Case Rate by County",
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(TRUE), 15), rep(list(FALSE), 15))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(FALSE), 15), rep(list(TRUE), 15))),
label = "Per 100K")))
))
Sys.sleep(15)
# dmvDeathsByStateLinePlotlyGraph <- plot_ly(data = dcmdvaDeathsLinePlotly, x = ~Date) %>%
#   add_trace(y = ~Deaths,
#             linetype = ~factor(State),
#             color = ~factor(State),
#             colors = c("#E91436", "#ebab00ff", "#00257C"),
#             mode = "lines+markers",
#             type = "scatter",
#             symbol = ~State,
#             hovertemplate = paste(
#               "State: ", dcmdvaDeathsLinePlotly$State,
#               "<br>Deaths: ", "%{y}",
#               "<br>Date: ", "%{x}",
#               "<extra></extra>"
#             ),
#             visible = T) %>%
#   add_trace(y = ~Death_Rate_100K,
#             linetype = ~factor(State),
#             color = ~factor(State),
#             colors = c("#E91436", "#ebab00ff", "#00257C"),
#             mode = "lines+markers",
#             type = "scatter",
#             symbol = ~State,
#             hovertemplate = paste(
#               "State: ", dcmdvaDeathsLinePlotly$State,
#               "<br>Deaths: ", "%{y}",
#               "<br>Date: ", "%{x}",
#               "<extra></extra>"
#             ),
#             visible = F) %>%
#   layout(#title = "DMV Covid-19 Deaths & Death Rate by State",
#          showlegend = F,
#          xaxis = list(title = ""),
#          updatemenus = list(
#            list(active = 0,
#                 buttons = list(
#                   list(method = "restyle",
#                        args = list("visible", append(rep(list(TRUE), 3), rep(list(FALSE), 3))),
#                        label = "Count"),
#                   list(method = "restyle",
#                        args = list("visible", append(rep(list(FALSE), 3), rep(list(TRUE), 3))),
#                        label = "Per 100K")))
#          ))
dmvDeathsByCountyBarPerCapPlotly <- DMV_Counties_Covid_Cases %>%
left_join(stateCountyPops, by = "FIPS") %>%
filter(Date == max(Date)) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
mutate(Death_Rate_100K = (Deaths / TOTAL_POP_100K))
dmvDeathsByCountyBarPlotlyGraph <- plot_ly(dmvDeathsByCountyBarPerCapPlotly,
x = ~factor(State),
type = "bar",
color = ~factor(reorder(County, -Deaths)),
colors = pals::glasbey()) %>%
add_trace(y = ~Death_Rate_100K,
hovertemplate = paste(
"State: ", dmvDeathsByCountyBarPerCapPlotly$State,
"<br>County: ", dmvDeathsByCountyBarPerCapPlotly$County,
"<br>Deaths: ", "%{y}",
"<br>Date: ", dmvDeathsByCountyBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = F) %>%
add_trace(y = ~Deaths,
hovertemplate = paste(
"State: ", dmvDeathsByCountyBarPerCapPlotly$State,
"<br>County: ", dmvDeathsByCountyBarPerCapPlotly$County,
"<br>Deaths: ", "%{y}",
"<br>Date: ", dmvDeathsByCountyBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = T) %>%
layout(#title = paste("DMV Covid-19 Cases & Case Rate by County on", Sys.Date() - 1, sep = " "),
yaxis = list(title = "Deaths"),
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(T), 15), rep(list(F), 15))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(F), 15), rep(list(T), 15))),
label = "Per 100K")))
))
# dcmdvaDeathsBarPlotly <- dailySummary %>%
#   drop_na(State) %>%
#   filter(Date == max(Date)) %>%
#   left_join(stateCountyPops, by = c("State" = "STNAME")) %>%
#   filter(SUMLEV == "040") %>%
#   mutate(Death_Rate_100K = as.double((Deaths / TOTAL_POP_100K)), Deaths = as.double(Deaths))
#
#
# dmvDeathsByStateBarPlotlyGraph <- plot_ly(dcmdvaDeathsBarPlotly,
#         x = ~factor(State),
#         type = "bar",
#         color = ~factor(State),
#         colors = c("#E91436", "#ebab00ff", "#00257C")) %>%
#   add_trace(y = ~Death_Rate_100K,
#             hovertemplate = paste(
#               "State: ", dcmdvaDeathsBarPlotly$State,
#               "<br>Deaths: ", "%{y}",
#               "<br>Date: ", dcmdvaDeathsBarPlotly$Date,
#               "<extra></extra>"
#             ),
#             visible = F) %>%
#     add_trace(y = ~Deaths,
#             hovertemplate = paste(
#               "State: ", dcmdvaDeathsBarPlotly$State,
#               "<br>Deaths: ", "%{y}",
#               "<br>Date: ", dcmdvaDeathsBarPlotly$Date,
#               "<extra></extra>"
#             ),
#             visible = T) %>%
#   layout(#title = paste("DMV Covid-19 Deaths & Death Rate by State on", Sys.Date() - 1, sep = " "),
#          xaxis = list(title = ""),
#          yaxis = list(title = "Deaths"),
#          showlegend = F,
#          updatemenus = list(
#            list(active = 0,
#                 buttons = list(
#                   list(method = "restyle",
#                        args = list("visible", append(rep(list(T), 3), rep(list(F), 3))),
#                        label = "Count"),
#                   list(method = "restyle",
#                        args = list("visible", append(rep(list(F), 3), rep(list(T), 3))),
#                        label = "Per 100K")))
#          ))
Sys.sleep(15)
#### DC Hospital Data ####
dcCovid19Hospitals <- dcCovid19Hospitals %>%
filter(Resource %in% c("ICU beds available", "Ventilators free"))
dcCovidHospitalLinePlotlyGraph <- plot_ly(data = dcCovid19Hospitals, x = ~Date) %>%
add_trace(y = ~Units,
color = ~factor(Resource),
colors = pals::glasbey(),
mode = "lines+markers",
type = "scatter",
hovertemplate = paste(
"Resource: ", dcCovid19Hospitals$Resource,
"<br>Units: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = T) %>%
layout(xaxis = list(
type = 'date',
tickformat = "%d %B",
title = ""
),
showlegend = T)
plotlyPlots <- list(dmvDeathsByCountyBarPlotlyGraph,
dmvDeathsByCountyLinePlotlyGraph,
dmvTestsByStateBarPlotlyGraph,
dmvTestsByStateLinePlotlyGraph,
dmvCasesByCountyBarPlotlyGraph,
dmvCasesByCountyLinePlotlyGraph,
dcCovidHospitalLinePlotlyGraph)
Sys.sleep(5)
plotlyPlots <- map(plotlyPlots, partial_bundle)
widget_file_size <- function(p) {
d <- tempdir()
withr::with_dir(d, htmlwidgets::saveWidget(p, "index.html"))
f <- file.path(d, "index.html")
mb <- round(file.info(f)$size / 1e6, 3)
message("File is: ", mb," MB")
}
Sys.sleep(5)
walk(plotlyPlots, widget_file_size)
Sys.sleep(5)
plotlyFileNames <- list("dmvDeathsByCountyBarPlotlyGraph.html",
"dmvDeathsByCountyLinePlotlyGraph.html",
"dmvTestsByStateBarPlotlyGraph.html",
"dmvTestsByStateLinePlotlyGraph.html",
"dmvCasesByCountyBarPlotlyGraph.html",
"dmvCasesByCountyLinePlotlyGraph.html",
"dcCovidHospitalLinePlotlyGraph.html")
# map2(plotlyPlots, plotlyFileNames, ~{saveWidget(.x, .y, selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")})
walk2(plotlyPlots, plotlyFileNames, ~{saveWidget(.x, .y, selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")})
