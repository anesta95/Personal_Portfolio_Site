dcCovid19ByAgeToday <- dcCovid19ByAgeSexToday[2:nrow(dcCovid19ByAgeSexToday),] %>%
mutate(Age_Range = `Patient Age (yrs)`, Cases = as.integer(`Total Positives`), Date = Sys.Date() - 1, State = "District of Columbia", Male = as.integer(Male), Female = as.integer(Female)) %>%
select(Age_Range, Cases, Date, State)
# Add today's breakout to the main file
dcCovid19ByAge <- read_csv("dcCovid19ByAge.csv")
dcCovid19ByAge <- bind_rows(dcCovid19ByAgeToday, dcCovid19ByAge)
write_csv(dcCovid19ByAge, "dcCovid19ByAge.csv")
dcCovid19ByAge
dcCovid19BySexToday <- dcCovid19ByAgeSexToday[1,] %>%
mutate(Cases = as.integer(`Total Positives`), Date = Sys.Date() - 1, State = "District of Columbia")
if ("Unknown" %in% names(dcCovid19BySexToday)) {
dcCovid19BySexToday$Unknown = as.integer(dcCovid19BySexToday$Unknown)
} else {
dcCovid19BySexToday$Unknown = rep(NA, nrow(dcCovid19BySexToday))
}
dcCovid19BySexToday <- dcCovid19BySexToday %>%
select(Unknown, Male, Female, Date, State) %>%
gather(-c(Date, State), key = "Sex", value = "Cases") %>%
mutate(Cases = as.integer(Cases)) %>%
select(Sex, Cases, Date, State)
dcCovid19BySex <- read_csv("dcCovid19BySex.csv")
dcCovid19BySex <- bind_rows(dcCovid19BySexToday, dcCovid19BySex)
dcCovid19BySex
write_csv(dcCovid19BySex, "dcCovid19BySex.csv")
dcCovid19ByWardToday <- dcCovid19ByWardToday[[1]]
colnames(dcCovid19ByWardToday) <- unname(dcCovid19ByWardToday[1,])
dcCovid19ByWardToday <- dcCovid19ByWardToday[2:nrow(dcCovid19ByWardToday),]
# Adding in a date column
dcCovid19ByWardToday <- dcCovid19ByWardToday %>%
mutate(Date = Sys.Date() - 1, Cases = as.integer(`Total Positive Cases`), Ward = as.integer(Ward)) %>%
select(Ward, Cases, Date)
# Adding today's by ward breakout to main file
dcCovid19ByWard <- read_csv("dcCovid19ByWard.csv")
dcCovid19ByWard <- bind_rows(dcCovid19ByWardToday, dcCovid19ByWard)
write_csv(dcCovid19ByWard, "dcCovid19ByWard.csv")
dcCovid19ByWard
dcCovid19DataSummaryDCOrgsToday <- read_xlsx("dcCovid-19DataSummaryToday.xlsx", sheet = "Sheet1", skip = 12)
dcCovid19DataSummaryToday <- read_xlsx("dcCovid-19DataSummaryToday.xlsx", sheet = "Sheet1", n_max = 11)
# Cleaning the Cases/Hospital data
colnames(dcCovid19DataSummaryToday) <- c("Organization", "Metric", as.character(seq.Date(from = as.Date("2020/03/07"), to = (Sys.Date() - 1), by = "day")))
dcCovid19DataSummaryToday <- dcCovid19DataSummaryToday[2:nrow(dcCovid19DataSummaryToday),]
dcCovid19DataSummaryToday <- dcCovid19DataSummaryToday %>%
filter_all(any_vars(!is.na(.))) %>%
gather(-c("Organization", "Metric"), key = "Date", value = "Amount") %>%
select(Metric, Date, Amount) %>%
spread(key = Metric, value = Amount)
colnames(dcCovid19DataSummaryToday) <- make.names(colnames(dcCovid19DataSummaryToday), unique = T)
dcCovid19TestingCases <- dcCovid19DataSummaryToday %>%
select(Date, People.Tested.Overall, Total.Positives, Number.of.Deaths, People.Recovered)
dcCovid19DataSummaryDCOrgsToday <- read_xlsx("dcCovid-19DataSummaryToday.xlsx", sheet = "Overal Stats", skip = 12)
dcCovid19DataSummaryToday <- read_xlsx("dcCovid-19DataSummaryToday.xlsx", sheet = "Overal Stats", n_max = 11)
colnames(dcCovid19DataSummaryToday) <- c("Organization", "Metric", as.character(seq.Date(from = as.Date("2020/03/07"), to = (Sys.Date() - 1), by = "day")))
dcCovid19DataSummaryToday <- dcCovid19DataSummaryToday[2:nrow(dcCovid19DataSummaryToday),]
dcCovid19DataSummaryToday <- dcCovid19DataSummaryToday %>%
filter_all(any_vars(!is.na(.))) %>%
gather(-c("Organization", "Metric"), key = "Date", value = "Amount") %>%
select(Metric, Date, Amount) %>%
spread(key = Metric, value = Amount)
colnames(dcCovid19DataSummaryToday) <- make.names(colnames(dcCovid19DataSummaryToday), unique = T)
dcCovid19TestingCases <- dcCovid19DataSummaryToday %>%
select(Date, People.Tested.Overall, Total.Positives, Number.of.Deaths, People.Recovered)
dcCovid19TestingCases
View(dcCovid19TestingCases)
write_csv(dcCovid19TestingCases, "dcCovid19TestingCases.csv")
dcSummary <- dcCovid19TestingCases %>%
filter(Date == max(Date)) %>%
rename(Tests = People.Tested.Overall, Deaths = Number.of.Deaths, Cases = Total.Positives) %>%
mutate(State = "District of Columbia", Date = Sys.Date() - 1) %>%
mutate(Cases = as.integer(Cases), Deaths = as.integer(Deaths), Tests = as.integer(Tests)) %>%
select(State, Cases, Deaths, Tests, Date)
# Saving the latest day's summary with State abbreviation and FIPS code column
DC_By_County <- dcCovid19TestingCases %>%
filter(Date == max(Date)) %>%
rename(Tests = People.Tested.Overall, Deaths = Number.of.Deaths, Cases = Total.Positives) %>%
mutate(State = "District of Columbia", Date = Sys.Date() - 1, County = "District of Columbia") %>%
mutate(Cases = as.integer(Cases)) %>%
left_join(stateConversions, by = c("State" = "Full_Name")) %>%
left_join(countyStateFIPS, by = c("Abbr" = "State", "County" = "Name")) %>%
dplyr::select(County, Cases, Date, State, Abbr, FIPS)
dcCovid19DataSummaryToday %>%
select(Date, ICU.Beds.Available, Total.Ventilators, Ventilators.in.Use, Ventilators.Available)
dcCovid19Hospitals <- dcCovid19DataSummaryToday %>%
select(Date, ICU.Beds.Available, Total.Ventilators, Ventilators.in.Use, Ventilators.Available)
View(dcCovid19Hospitals)
write_csv(dcCovid19Hospitals, "dcCovid19Hospitals.csv")
colnames(dcCovid19DataSummaryDCOrgsToday) <- c("Organization", "Metric", as.character(seq.Date(from = as.Date("2020/03/07"), to = (Sys.Date() - 1), by = "day")))
# Cleaning and resaving the most updated organization data
dcCovid19DataSummaryDCOrgsToday <- dcCovid19DataSummaryDCOrgsToday %>%
filter_all(any_vars(!is.na(.))) %>%
filter(!is.na(Organization)) %>%
gather(-c("Organization", "Metric"), key = "Date", value = "Amount") %>%
filter(Metric != "FEMS") %>%
spread(key = Metric, value = Amount) %>%
mutate(Organization = str_replace_all(Organization, " ", "-")) %>%
rename_all(funs(str_replace_all(., " ", ".")))
dcCovid19DataSummaryDCOrgsToday
write_csv(dcCovid19DataSummaryDCOrgsToday, "dcCovid19DataSummaryDCOrgs.csv")
Virginia_Totals_Today <- read_csv("VirginiaTotals.csv") %>% filter(Date == max(Date))
Virginia_By_County_Today <- read_csv("Virginia_By_County_Today.csv") %>%
rename(County = Locality, Date = `Report Date`, Cases = `Total Cases`) %>%
mutate(State = "Virginia") %>%
mutate(Date = mdy(Date)) %>%
filter(Date == max(Date)) %>%
left_join(stateConversions, by = c("State" = "Full_Name")) %>%
dplyr::select(County, Cases, Date, State, Abbr, FIPS)
Virginia_By_County <- read_csv("Virginia_By_County.csv")
MD_By_County <- read_csv("MD_By_County.csv")
MD_Summary_Today <- read_csv("MD_Summary.csv") %>% filter(Date == max(Date))
MD_By_County_Today <- MD_By_County %>% filter(Date == max(Date))
WV_CountiesDFCleaned <- read_csv("WV_Counties.csv") %>% filter(Date == max(Date))
### This is for the top-line dataframe as requested by the DCist ####
# Making the Virginia statewide totals for the day
Virginia <- Virginia_Totals_Today[c(1, 2, 4)]
Virginia$Cases <- sum(Virginia_By_County$Cases)
Virginia$State <- "Virginia"
Virginia <- Virginia %>%
select(State, Cases, Deaths, Tests, Date)
# Making the Virginia statewide totals for the day
Maryland <- tibble(State = "Maryland",
Cases = sum(MD_By_County$Cases),
Deaths = MD_Summary_Today$Deaths,
Tests = MD_Summary_Today$Tests, # This is fixed now: sum(MD_Summary_Today$Tests, sum(MD_By_County_Today$Cases)), # Fix this earlier by swaping the MD_Cases_By_County before the MD_Summary and replace the old test number with the test number plus the total cases for all counties.
Date = Sys.Date() - 1)
# Making the Virginia cases by county
virginiaCounties <- Virginia_By_County_Today %>%
filter(County %in% c("Alexandria", "Arlington", "Fairfax", "Loudoun", "Prince William", "Culpeper")) %>%
mutate(Deaths = NA) %>%
mutate(Tests = NA) %>%
select(County, Cases, Deaths, Tests, Date)
# Making the Maryland cases by county
marylandCounties <- MD_By_County_Today %>%
filter(County %in% c("Montgomery", "Prince Georges", "Frederick", "Calvert")) %>%
mutate(Deaths = NA) %>%
mutate(Tests = NA) %>%
select(County, Cases, Deaths, Tests, Date)
# Making the daily summary dataframe the DCist requested
dailySummaryToday <- bind_rows(dcSummary, Maryland, marylandCounties, Virginia, virginiaCounties) %>%
select(State, County, Cases, Deaths, Tests, Date)
# Adding the daily summary to the main file
dailySummary <- read_csv("covidSummaryDCist.csv")
dailySummary <- bind_rows(dailySummaryToday, dailySummary)
dailySummary
write_csv(dailySummary, "covidSummaryDCist.csv")
Full_States <- read_csv("FullStates.csv")
# Adding in today's by county data fro DC, VA, MD, and WV
Full_States <- bind_rows(Full_States, Virginia_By_County, MD_By_County, WV_CountiesDFCleaned, DC_By_County) %>%
arrange(desc(Date))
# Clean up county names so they can be joined on later
Full_States <- Full_States %>%
mutate(County = unlist(lapply(County, str_remove_all, "'"))) %>%
mutate(County = unlist(lapply(County, str_remove_all, "/."))) %>%
mutate(County = case_when(County %in% c("Alexandria", "Harrisonburg", "Chesapeake", "Newport News", "Williamsburg", "Portsmouth", "Charlottesville", "Virginia Beach", "Suffolk", "Norfolk") ~ paste(County, "City", sep = " "),
County %in% c("Franklin County", "Baltimore County") ~ str_remove(County, ".County"),
str_detect(County, "Chesterf.*")  ~ "Chesterfield",
str_detect(County, 'Sta..ord') ~ "Stafford",
str_detect(County, 'Su..olk') ~ "Suffolk City",
str_detect(County, ".*Marys") ~ "St Marys",
T ~ County)) #%>%
# left_join(stateConversions, by = c("State" = "Full_Name")) %>%
# left_join(countyStateFIPS, by = c("Abbr" = "State", "County" = "Name"))
Full_States
Full_States %>%
distinct() %>%
write_csv("FullStates.csv")
Full_States <- Full_States %>% distinct()
DMV_Counties <- c("District of Columbia",
"Calvert", "Charles", "Frederick", "Montgomery", "Prince Georges",
"Alexandria", "Arlington", "Clarke", "Culpeper", "Fairfax", "Farquier", "Fredericksburg", "Loudoun", "Manassas", "Prince William", "Rappahannock", "Spotsylvania", "Stafford", "Warren",
"Jefferson")
DMV_FIPS <- c("11001", "24009", "24017", "24021", "24031", "24033", "51510", "51013", "51043", "51047", "51059", "51061", "51630", "51107", "51683", "51153", "51157", "51177", "51179", "51187", "54037", "51600", "51610", "51685")
DMV_Closer_FIPS <- c("24031", "24033", "24021", "24009", "51510", "51013", "51059", "51600", "51107", "51153", "51047", "11001")
DMV_Counties_Covid_Cases <- Full_States %>%
mutate(FIPS = as.character(FIPS)) %>%
filter(FIPS %in% DMV_FIPS)
DMV_Counties_Covid_Cases
write_csv(DMV_Counties_Covid_Cases, "DMVCountiesCovidCases.csv")
covid19Theme <- function() {
theme_classic() +
theme(text = element_text(family = "Georgia", color = "gray25"),
plot.title = element_text(size = 24, face = "bold"),
plot.subtitle = element_text(size = 16),
plot.caption = element_text(color = "gray30", size = 12),
legend.position = "right",
legend.text = element_text(color = "gray30", size = 14, face = "bold"),
legend.title = element_text(color = "gray30", size = 16, face = "bold"),
axis.text = element_text(color = "gray25", size = 14)
)
}
ggplotCaption <- "Data from: DC Mayor's Office, MD Dept of Health, VA Dept of Health"
DMV_Counties_Covid_Cases %>%
filter(Date >= as.Date("2020-03-23")) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
ggplot(aes(x = Date, y = Cases)) +
geom_line(aes(color = County), size = 3) +
geom_point(aes(shape = State, color = County), size = 6) +
scale_y_continuous(trans = 'log2', breaks = trans_breaks("log2", function(x) 2^x)) +
covid19Theme() +
scale_color_brewer(palette = "Paired") +
labs(title = "DMV Covid-19 cases by county", subtitle = "Over time", caption = ggplotCaption) + xlab("") + ylab("")
dmvCasesByCountyLine <- DMV_Counties_Covid_Cases %>%
filter(Date >= as.Date("2020-03-23")) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
ggplot(aes(x = Date, y = Cases)) +
geom_line(aes(color = County), size = 3) +
geom_point(aes(shape = State, color = County), size = 6) +
scale_y_continuous(trans = 'log2', breaks = trans_breaks("log2", function(x) 2^x)) +
covid19Theme() +
scale_color_brewer(palette = "Paired") +
labs(title = "DMV Covid-19 cases by county", subtitle = "Over time", caption = ggplotCaption) + xlab("") + ylab("")
ggsave(filename = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19/dmvCasesByCountyLine.png", plot = dmvCasesByCountyLine, width = 300, height = 250, units = 'mm')
Sys.sleep(5)
## Per capita county line chart
dmvCasesByCountyLinePerCap <- DMV_Counties_Covid_Cases %>%
left_join(stateCountyPops, by = "FIPS") %>%
filter(Date >= as.Date("2020-03-23")) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
ggplot(aes(x = Date, y = (Cases / TOTAL_POP_100K))) +
geom_line(aes(color = County), size = 3) +
geom_point(aes(shape = State, color = County), size = 6) +
scale_y_continuous(trans = 'log2', breaks = trans_breaks("log2", function(x) 2^x)) +
covid19Theme() +
scale_color_brewer(palette = "Paired") +
labs(title = "DMV Covid-19 case rate per capita by county", subtitle = "Over time, per 100k residents", caption = ggplotCaption) + xlab("") + ylab("")
ggsave(filename = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19/dmvCasesByCountyLinePerCap.png", plot = dmvCasesByCountyLinePerCap, width = 300, height = 250, units = 'mm')
Sys.sleep(5)
#
dmvCasesByCountyBar <- DMV_Counties_Covid_Cases %>%
filter(Date == max(Date)) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
ggplot(aes(x = State, y = Cases, fill = reorder(County, -Cases))) +
geom_col(position = "dodge") +
geom_text(aes(label = Cases), vjust = -0.2, size = 5, position = position_dodge2(width = 0.9, reverse = F)) +
covid19Theme() +
scale_fill_brewer(palette = "Paired") +
labs(title = "DMV Covid-19 cases by county", subtitle = paste("On", Sys.Date() - 1, sep = " "), caption = ggplotCaption) + xlab("") + ylab("") +
guides(fill=guide_legend(title="County"))
ggsave(filename = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19/dmvCasesByCountyBar.png", plot = dmvCasesByCountyBar, width = 300, height = 275, units = 'mm')
Sys.sleep(5)
## Per Capita County Bar Chart
dmvCasesByCountyBarPerCap <- DMV_Counties_Covid_Cases %>%
left_join(stateCountyPops, by = "FIPS") %>%
filter(Date == max(Date)) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
ggplot(aes(x = State, y = round((Cases / TOTAL_POP_100K), 1), fill = reorder(County, -round((Cases / TOTAL_POP_100K), 1)))) +
geom_col(position = "dodge") +
geom_text(aes(label = round((Cases / TOTAL_POP_100K), 0)), vjust = -0.2, size = 7, position = position_dodge2(width = 0.9, reverse = F)) +
covid19Theme() +
scale_fill_brewer(palette = "Paired") +
labs(title = "DMV Covid-19 case rate by county per capita", subtitle = paste("On", paste0(Sys.Date() - 1, ","), "per 100k residents", sep = " "), caption = ggplotCaption) + xlab("") + ylab("") +
guides(fill=guide_legend(title="County"))
ggsave(filename = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19/dmvCasesByCountyBarPerCap.png", plot = dmvCasesByCountyBarPerCap, width = 300, height = 275, units = 'mm')
Sys.sleep(5)
#
# ### Line chart of all people tested by state
# ### Bar Chart of most recent totals
#
DMVTestsLine <- dailySummary %>%
drop_na(Tests) %>%
ggplot(aes(x = Date, y = Tests)) +
geom_line(aes(color = State), na.rm = T, size = 3) +
geom_point(aes(shape = State, color = State), size = 6) +
scale_y_continuous(breaks = seq(0, (max(dailySummary$Tests, na.rm = T) + 2000), by = 2000)) +
scale_color_manual(values = c("#E91436", "#ebab00ff", "#00257C")) +
covid19Theme() +
labs(title = "DMV Covid-19 tests", subtitle = "Over time", caption = ggplotCaption) + xlab("") + ylab("")
ggsave(filename = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19/DMVTestsLine.png", plot = DMVTestsLine, width = 300, height = 275, units = 'mm')
Sys.sleep(5)
### Line Chart of testing rate per capita
DMVTestsLinePerCap <- dailySummary %>%
drop_na(Tests) %>%
left_join(stateCountyPops, by = c("State" = "STNAME")) %>%
filter(SUMLEV == "040") %>%
ggplot(aes(x = Date, y = (Tests / TOTAL_POP_100K))) +
geom_line(aes(color = State), na.rm = T, size = 3) +
geom_point(aes(shape = State, color = State), size = 6) +
scale_y_continuous(breaks = seq(0, max(dailySummary$Tests, na.rm = T), by = 100)) +
scale_color_manual(values = c("#E91436", "#ebab00ff", "#00257C")) +
covid19Theme() +
labs(title = "DMV Covid-19 test rate", subtitle = "Over time, per 100k residents", caption = ggplotCaption) + xlab("") + ylab("")
ggsave(filename = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19/DMVTestsLinePerCap.png", plot = DMVTestsLinePerCap, width = 300, height = 275, units = 'mm')
Sys.sleep(5)
#
DMVTestsBar <- dailySummary %>%
drop_na(Tests) %>%
filter(Date == max(Date)) %>%
ggplot(aes(x = State, y = Tests)) +
geom_col(aes(fill = State), na.rm = T) +
geom_text(aes(label = Tests), vjust = -0.2, size = 8) +
scale_fill_manual(values = c("#E91436", "#ebab00ff", "#00257C")) +
covid19Theme() +
labs(title = "DMV Covid-19 tests", subtitle = paste("On", Sys.Date() - 1, sep = " "), caption = ggplotCaption) + xlab("") + ylab("")
ggsave(filename = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19/DMVTestsBar.png", plot = DMVTestsBar, width = 300, height = 275, units = 'mm')
Sys.sleep(5)
#
DMVTestsBarPerCap <- dailySummary %>%
drop_na(Tests) %>%
filter(Date == max(Date)) %>%
left_join(stateCountyPops, by = c("State" = "STNAME")) %>%
filter(SUMLEV == "040") %>%
ggplot(aes(x = State, y = round((Tests / TOTAL_POP_100K), 1)))  +
geom_col(aes(fill = State), na.rm = T) +
geom_text(aes(label = round((Tests / TOTAL_POP_100K), 1)), vjust = -0.2, size = 8) +
scale_fill_manual(values = c("#E91436", "#ebab00ff", "#00257C")) +
covid19Theme() +
labs(title = "DMV Covid-19 test rate", subtitle = paste("On", paste0(Sys.Date() - 1, ","), "per 100k residents", sep = " "), caption = ggplotCaption) + xlab("") + ylab("")
ggsave(filename = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19/DMVTestsBarPerCap.png", plot = DMVTestsBarPerCap, width = 300, height = 275, units = 'mm')
Sys.sleep(5)
# ### Line Chart of death totals by state over time
dcmdvaDeathsLine <- dailySummary %>%
drop_na(State) %>%
ggplot(aes(x = Date, y = Deaths)) +
geom_line(aes(color = State), na.rm = T, size = 3) +
geom_point(aes(color = State, shape = State), na.rm = T, size = 6) +
scale_color_manual(values = c("#E91436", "#EBAB00", "#00257C")) +
scale_y_continuous(breaks = seq(min(dailySummary$Deaths, na.rm = T), max(dailySummary$Deaths, na.rm = T), by = 2)) +
covid19Theme() +
labs(title = "DMV Covid-19 deaths", subtitle = "Over time", caption = ggplotCaption) + xlab("") + ylab("")
ggsave(filename = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19/dcmdvaDeathsLine.png", plot = dcmdvaDeathsLine, width = 300, height = 275, units = 'mm')
Sys.sleep(5)
# ### Bar Chart of latest death totals by State
#
dcmdvaDeathsBar <- dailySummary %>%
drop_na(State) %>%
filter(Date == max(Date)) %>%
ggplot(aes(x = State, y = Deaths)) +
geom_col(aes(fill = State), na.rm = T) +
geom_text(aes(label = Deaths), vjust = -0.2, size = 8) +
scale_fill_manual(values = c("#E91436", "#EBAB00", "#00257C")) +
covid19Theme() +
labs(title = "DMV Covid-19 deaths", subtitle = paste("On", Sys.Date() - 1, sep = " "), caption = ggplotCaption) + xlab("") + ylab("")
ggsave(filename = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19/dcmdvaDeathsBar.png", plot = dcmdvaDeathsBar, width = 300, height = 275, units = 'mm')
Sys.sleep(5)
#
# ### Chloropleth of Washington Metro Area Counties by Cases
# Read in shapfile of US counties
counties <- st_read("/home/adrian/Documents/US_County_Shapfile_Population/tl_2019_us_county.shp")
# Make dataframe of DMV counties and join in their populations for per-capita calculations
DMV <- counties %>%
mutate(GEOID = as.character(GEOID), NAME = as.character(NAME)) %>%
filter(GEOID %in% DMV_FIPS) %>%
left_join(stateCountyPops, by = c("GEOID" = "FIPS"))
# Fix Fairfax city name error
DMV[DMV$GEOID == "51600",]$NAME <- "Fairfax City"
# plot(st_geometry(DMV))
# Get only today's DMV Covid-19 cases by county
DMV_Counties_Covid_Cases_Today <- DMV_Counties_Covid_Cases %>%
filter(Date == max(Date))
# Join
DMV_Cases <- DMV %>%
left_join(DMV_Counties_Covid_Cases_Today, by = c("GEOID" = "FIPS"))
# Fill NAs with 0
DMV_Cases <- DMV_Cases %>%
mutate(Cases = if_else(is.na(Cases), 0, Cases))
# Assign new projection
st_crs(DMV_Cases) <- "+proj=longlat +datum=WGS84"
# No longer making this static plot, making a leaflet one!
# DMV_Cases %>%
#   ggplot() +
#   geom_sf(aes(fill = Cases)) +
#   scale_fill_gradient(low = "#fee0d2", high = "#de2d26")
#
# ### Chloropleth of Washington Metro Area Counties by Cases
#myBins <- round(c(as.integer(unname(quantile(DMV_Cases$Cases, na.rm = T))), Inf), 0)
# Create cases and per cap case rate bins and palettes
myBinsReg <- round(seq(from = 0, to = (max(DMV_Cases$Cases) + 1), by = (max(DMV_Cases$Cases) / 6)), 0)
upperPerCapBoundary <- round(max(DMV_Cases$Cases / DMV_Cases$TOTAL_POP_100K) + 1, 0)
while(upperPerCapBoundary %% 6 != 0) {
upperPerCapBoundary = upperPerCapBoundary + 1
}
myBinsPerCap <- seq(from = 0,
to = upperPerCapBoundary,
by = upperPerCapBoundary / 6)
dmvPaletteReg <- colorBin(palette = "YlOrRd", domain = DMV_Cases$Cases, na.color = "transparent", bins = myBinsReg)
dmvPalettePerCap <- colorBin(palette = "YlOrRd", domain = DMV_Cases$Cases, na.color = "transparent", bins = myBinsPerCap)
Sys.sleep(15)
# Create tool tip legend text
legendText <- paste0(
"County: ", DMV_Cases$NAME, "<br/>",
"State: ", DMV_Cases$State, "<br/>",
"Cases: ", DMV_Cases$Cases, "<br/>"
) %>%
lapply(htmltools::HTML)
# Make the per capita leaflet chloropleth
legendTextPerCap <- paste0(
"County: ", DMV_Cases$NAME, "<br/>",
"State: ", DMV_Cases$State, "<br/>",
"Rate per 100K: ", round((DMV_Cases$Cases / DMV_Cases$TOTAL_POP_100K), 1), "<br/>"
) %>%
lapply(htmltools::HTML)
attribution <- htmltools::HTML("Map data &copy; <a href='https://www.openstreetmap.org/'>OpenStreetMap</a> contributors, <a href='https://creativecommons.org/licenses/by-sa/2.0/'>CC-BY-SA</a><br/>Data from: <a href = 'https://dhhr.wv.gov/COVID-19/Pages/default.aspx'>WV DHHR</a>, <a href='https://coronavirus.dc.gov/page/coronavirus-data'>DC Mayor's Office</a>, <a href='https://coronavirus.maryland.gov/'>MD Dept of Health</a>, <a href='http://www.vdh.virginia.gov/coronavirus/'>VA Dept of Health</a>")
leaflet(DMV_Cases) %>%
addTiles(attribution = attribution) %>%
setView(lat = "38.87086", lng = "-77.13826", zoom = 8) %>%
addPolygons(stroke=T,
opacity = 1,
fillOpacity = 0.9,
smoothFactor = 0.5,
color = "black",
fillColor = ~dmvPaletteReg(Cases),
weight = 0.5,
label = legendText,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
),
group = paste("Case count", Sys.Date() - 1, sep = " ")) %>%
addPolygons(stroke=T,
opacity = 1,
fillOpacity = 0.9,
smoothFactor = 0.5,
color = "black",
fillColor = ~dmvPalettePerCap((Cases / TOTAL_POP_100K)),
weight = 0.5,
label = legendTextPerCap,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
),
group = paste("Case rate per 100K", Sys.Date() - 1, sep = " ")) %>%
addLegend( pal=dmvPaletteReg,
values=~Cases,
opacity=0.9,
title = paste("Case count", Sys.Date() - 1, sep = " "),
position = "topright",
group = paste("Case count", Sys.Date() - 1, sep = " ")) %>%
addLegend( pal=dmvPalettePerCap,
values=~(Cases / TOTAL_POP_100K),
opacity=0.9,
title = paste("Case rate per 100K", Sys.Date() - 1, sep = " "),
position = "topright",
group = paste("Case rate per 100K", Sys.Date() - 1, sep = " ")) %>%
addLayersControl(baseGroups = c(paste("Case count", Sys.Date() - 1, sep = " "), paste("Case rate per 100K", Sys.Date() - 1, sep = " ")),
position = "topright",
options = layersControlOptions(collapsed = F)) %>%
htmlwidgets::onRender(
"function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.children[0].children[0].innerText == selectedGroup) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', e => updateLegend());
}"
)
dmvChloropleth <- leaflet(DMV_Cases) %>%
addTiles(attribution = attribution) %>%
setView(lat = "38.87086", lng = "-77.13826", zoom = 8) %>%
addPolygons(stroke=T,
opacity = 1,
fillOpacity = 0.9,
smoothFactor = 0.5,
color = "black",
fillColor = ~dmvPaletteReg(Cases),
weight = 0.5,
label = legendText,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
),
group = paste("Case count", Sys.Date() - 1, sep = " ")) %>%
addPolygons(stroke=T,
opacity = 1,
fillOpacity = 0.9,
smoothFactor = 0.5,
color = "black",
fillColor = ~dmvPalettePerCap((Cases / TOTAL_POP_100K)),
weight = 0.5,
label = legendTextPerCap,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
),
group = paste("Case rate per 100K", Sys.Date() - 1, sep = " ")) %>%
addLegend( pal=dmvPaletteReg,
values=~Cases,
opacity=0.9,
title = paste("Case count", Sys.Date() - 1, sep = " "),
position = "topright",
group = paste("Case count", Sys.Date() - 1, sep = " ")) %>%
addLegend( pal=dmvPalettePerCap,
values=~(Cases / TOTAL_POP_100K),
opacity=0.9,
title = paste("Case rate per 100K", Sys.Date() - 1, sep = " "),
position = "topright",
group = paste("Case rate per 100K", Sys.Date() - 1, sep = " ")) %>%
addLayersControl(baseGroups = c(paste("Case count", Sys.Date() - 1, sep = " "), paste("Case rate per 100K", Sys.Date() - 1, sep = " ")),
position = "topright",
options = layersControlOptions(collapsed = F)) %>%
htmlwidgets::onRender(
"function(el, x) {
var updateLegend = function () {
var selectedGroup = document.querySelectorAll('input:checked')[0].nextSibling.innerText.substr(1);
document.querySelectorAll('.legend').forEach(a => a.hidden=true);
document.querySelectorAll('.legend').forEach(l => {
if (l.children[0].children[0].innerText == selectedGroup) l.hidden=false;
});
};
updateLegend();
this.on('baselayerchange', e => updateLegend());
}"
)
Sys.sleep(5)
setwd("/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
Sys.sleep(15)
mapshot(dmvChloropleth, url = "dmvChloropleth.html")
