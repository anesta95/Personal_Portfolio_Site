color = ~factor(Resource),
colors = pals::glasbey(),
mode = "lines+markers",
type = "scatter",
hovertemplate = paste(
"Resource: ", dcCovid19Hospitals$Resource,
"<br>Units: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = T) %>%
layout(yaxis = list(title = ""),
xaxis = list(
type = 'date',
tickformat = "%d %B"
),
showlegend = T)
plot_ly(data = dcCovid19Hospitals, x = ~Date) %>%
add_trace(y = ~Units,
color = ~factor(Resource),
colors = pals::glasbey(),
mode = "lines+markers",
type = "scatter",
hovertemplate = paste(
"Resource: ", dcCovid19Hospitals$Resource,
"<br>Units: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = T) %>%
layout(xaxis = list(
type = 'date',
tickformat = "%d %B",
title = ""
),
showlegend = T)
Full_States <- read_csv("FullStates.csv")
library(rvest)
library(htmltools)
library(htmlwidgets)
library(RColorBrewer)
library(xml2)
library(curl)
library(httr)
library(splashr)
library(stevedore)
library(rlist)
library(lubridate)
library(RSelenium)
library(wdman)
library(devtools)
library(pdftools)
library(sf)
library(raster)
library(sp)
library(rgdal)
library(leaflet)
library(plotly)
library(mapview)
library(readxl)
library(scales)
library(tidyverse)
setwd("/home/adrian/Documents/DCist_Covid-19_Analysis")
# Import and make conversion tables first
stateConversions <- tibble(Full_Name = state.name, Abbr = state.abb)
stateConversions <- bind_rows(stateConversions, tibble(Full_Name = "District of Columbia", Abbr = "DC")) %>%
arrange(Full_Name)
countyStateFIPS <- read_csv("countyFIPSCodes2019.csv")
countyStateFIPS <- bind_rows(countyStateFIPS, tibble(FIPS = 11001, Name = "District of Columbia", State = "DC"))
stateCountyPops <- read_csv("/home/adrian/Documents/US_County_Shapfile_Population/co-est2019-alldata.csv", col_types = cols_only(SUMLEV = "c", STATE = "c", COUNTY = "c", STNAME = "c", CTYNAME = "c", POPESTIMATE2019 = "n"))
stateCountyPops <- stateCountyPops %>%
mutate(FIPS = str_c(STATE, COUNTY), TOTAL_POP = POPESTIMATE2019, TOTAL_POP_100K = POPESTIMATE2019 / 100000)
# Make the character vectors of the county names and FIPS codes
DMV_Counties <- c("District of Columbia",
"Calvert", "Charles", "Frederick", "Montgomery", "Prince Georges",
"Alexandria", "Arlington", "Clarke", "Culpeper", "Fairfax", "Farquier", "Fredericksburg", "Loudoun", "Manassas", "Prince William", "Rappahannock", "Spotsylvania", "Stafford", "Warren",
"Jefferson")
DMV_FIPS <- c("11001", "24009", "24017", "24021", "24031", "24033", "51510", "51013", "51043", "51047", "51059", "51061", "51630", "51107", "51683", "51153", "51157", "51177", "51179", "51187", "54037", "51600", "51610", "51685")
DMV_Closer_FIPS <- c("24031", "24033", "24021", "24009", "51510", "51013", "51059", "51600", "51107", "51153", "51047", "11001", "51610", "51683", "51685")
Full_States <- read_csv("FullStates.csv")
dailySummary <- read_csv("covidSummaryDCist.csv")
View(dailySummary)
View(dailySummary)
DMV_Counties_Covid_Cases <- Full_States %>%
mutate(FIPS = as.character(FIPS)) %>%
filter(FIPS %in% DMV_FIPS)
setwd("/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
dcCovid19Hosptials <- read_csv("dcCovid19Hosptials.csv")
setwd("/home/adrian/Documents/DCist_Covid-19_Analysis")
dcCovid19Hosptials <- read_csv("dcCovid19Hosptials.csv")
dcCovid19Hospitals <- read_csv("dcCovid19Hospitals.csv")
setwd("/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
dmvCasesByCountyLinePlotly <- DMV_Counties_Covid_Cases %>%
left_join(stateCountyPops, by = "FIPS") %>%
filter(Date >= as.Date("2020-03-23")) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
mutate(Case_Rate_100K = (Cases / TOTAL_POP_100K))
## This pretty much works! I need to get it to display only one option on rendering
# https://stackoverflow.com/questions/42081811/plotly-drop-down-menu-not-restyling-y-correctly
### This works!!!
dmvCasesByCountyLinePlotlyGraph <- plot_ly(data = dmvCasesByCountyLinePlotly, x = ~Date) %>%
add_trace(y = ~Cases,
linetype = ~factor(State),
color = ~factor(County),
colors = pals::glasbey(),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", dmvCasesByCountyLinePlotly$State,
"<br>County: ", dmvCasesByCountyLinePlotly$County,
"<br>Cases: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Case_Rate_100K,
linetype = ~factor(State),
color = ~factor(County),
colors = pals::glasbey(),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", dmvCasesByCountyLinePlotly$State,
"<br>County: ", dmvCasesByCountyLinePlotly$County,
"<br>Cases: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = F) %>%
layout(yaxis = list(type = "log"),
#title = "DMV Covid-19 Cases & Case Rate by County",
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(TRUE), 15), rep(list(FALSE), 15))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(FALSE), 15), rep(list(TRUE), 15))),
label = "Per 100K")))
))
Sys.sleep(5)
dmvCasesByCountyBarPerCapPlotly <- DMV_Counties_Covid_Cases %>%
left_join(stateCountyPops, by = "FIPS") %>%
filter(Date == max(Date)) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
mutate(Case_Rate_100K = (Cases / TOTAL_POP_100K))
dmvCasesByCountyBarPlotlyGraph <- plot_ly(dmvCasesByCountyBarPerCapPlotly,
x = ~factor(State),
type = "bar",
color = ~factor(reorder(County, -Cases)),
colors = pals::glasbey()) %>%
add_trace(y = ~Cases,
hovertemplate = paste(
"State: ", dmvCasesByCountyBarPerCapPlotly$State,
"<br>County: ", dmvCasesByCountyBarPerCapPlotly$County,
"<br>Cases: ", "%{y}",
"<br>Date: ", dmvCasesByCountyBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Case_Rate_100K,
hovertemplate = paste(
"State: ", dmvCasesByCountyBarPerCapPlotly$State,
"<br>County: ", dmvCasesByCountyBarPerCapPlotly$County,
"<br>Cases: ", "%{y}",
"<br>Date: ", dmvCasesByCountyBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = F) %>%
layout(#title = paste("DMV Covid-19 Cases & Case Rate by County on", Sys.Date() - 1, sep = " "),
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(F), 15), rep(list(T), 15))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(T), 15), rep(list(F), 15))),
label = "Per 100K")))
))
Sys.sleep(5)
DMVTestsLinePerCapPlotly <- dailySummary %>%
drop_na(Tests) %>%
left_join(stateCountyPops, by = c("State" = "STNAME")) %>%
filter(SUMLEV == "040") %>%
mutate(Test_Rate_100K = (Tests / TOTAL_POP_100K))
dmvTestsByStateLinePlotlyGraph <- plot_ly(data = DMVTestsLinePerCapPlotly, x = ~Date) %>%
add_trace(y = ~Tests,
linetype = ~factor(State),
color = ~factor(State),
colors = c("#E91436", "#ebab00ff", "#00257C"),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", DMVTestsLinePerCapPlotly$State,
"<br>Tests: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Test_Rate_100K,
linetype = ~factor(State),
color = ~factor(State),
colors = c("#E91436", "#ebab00ff", "#00257C"),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", DMVTestsLinePerCapPlotly$State,
"<br>Tests: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = F) %>%
layout(#title = "DMV Covid-19 Tests & Test Rate by State",
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(TRUE), 3), rep(list(FALSE), 3))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(FALSE), 3), rep(list(TRUE), 3))),
label = "Per 100K")))
))
Sys.sleep(5)
DMVTestsBarPerCapPlotly <- dailySummary %>%
drop_na(Tests) %>%
filter(Date == max(Date)) %>%
left_join(stateCountyPops, by = c("State" = "STNAME")) %>%
filter(SUMLEV == "040") %>%
mutate(Test_Rate_100K = (Tests / TOTAL_POP_100K))
dmvTestsByStateBarPlotlyGraph <- plot_ly(DMVTestsBarPerCapPlotly,
x = ~factor(State),
type = "bar",
color = ~factor(State),
colors = c("#E91436", "#ebab00ff", "#00257C")) %>%
add_trace(y = ~Tests,
hovertemplate = paste(
"State: ", DMVTestsBarPerCapPlotly$State,
"<br>Tests: ", "%{y}",
"<br>Date: ", DMVTestsBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Test_Rate_100K,
hovertemplate = paste(
"State: ", DMVTestsBarPerCapPlotly$State,
"<br>Cases: ", "%{y}",
"<br>Date: ", DMVTestsBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = F) %>%
layout(#title = paste("DMV Covid-19 Tests & Test Rate by State on", Sys.Date() - 1, sep = " "),
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(F), 3), rep(list(T), 3))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(T), 3), rep(list(F), 3))),
label = "Per 100K")))
))
Sys.sleep(5)
dcmdvaDeathsLinePlotly <- DMV_Counties_Covid_Cases %>%
left_join(stateCountyPops, by = "FIPS") %>%
filter(Date >= as.Date("2020-04-02")) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
mutate(Death_Rate_100K = (Deaths / TOTAL_POP_100K))
dmvDeathsByCountyLinePlotlyGraph <- plot_ly(data = dcmdvaDeathsLinePlotly, x = ~Date) %>%
add_trace(y = ~Deaths,
linetype = ~factor(State),
color = ~factor(County),
colors = pals::glasbey(),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", dcmdvaDeathsLinePlotly$State,
"<br>County: ", dcmdvaDeathsLinePlotly$County,
"<br>Deaths: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = T) %>%
add_trace(y = ~Death_Rate_100K,
linetype = ~factor(State),
color = ~factor(County),
colors = pals::glasbey(),
mode = "lines+markers",
type = "scatter",
symbol = ~State,
hovertemplate = paste(
"State: ", dcmdvaDeathsLinePlotly$State,
"<br>County: ", dcmdvaDeathsLinePlotly$County,
"<br>Deaths: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = F) %>%
layout(yaxis = list(type = "log"),
#title = "DMV Covid-19 Cases & Case Rate by County",
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(TRUE), 15), rep(list(FALSE), 15))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(FALSE), 15), rep(list(TRUE), 15))),
label = "Per 100K")))
))
Sys.sleep(5)
# dmvDeathsByStateLinePlotlyGraph <- plot_ly(data = dcmdvaDeathsLinePlotly, x = ~Date) %>%
#   add_trace(y = ~Deaths,
#             linetype = ~factor(State),
#             color = ~factor(State),
#             colors = c("#E91436", "#ebab00ff", "#00257C"),
#             mode = "lines+markers",
#             type = "scatter",
#             symbol = ~State,
#             hovertemplate = paste(
#               "State: ", dcmdvaDeathsLinePlotly$State,
#               "<br>Deaths: ", "%{y}",
#               "<br>Date: ", "%{x}",
#               "<extra></extra>"
#             ),
#             visible = T) %>%
#   add_trace(y = ~Death_Rate_100K,
#             linetype = ~factor(State),
#             color = ~factor(State),
#             colors = c("#E91436", "#ebab00ff", "#00257C"),
#             mode = "lines+markers",
#             type = "scatter",
#             symbol = ~State,
#             hovertemplate = paste(
#               "State: ", dcmdvaDeathsLinePlotly$State,
#               "<br>Deaths: ", "%{y}",
#               "<br>Date: ", "%{x}",
#               "<extra></extra>"
#             ),
#             visible = F) %>%
#   layout(#title = "DMV Covid-19 Deaths & Death Rate by State",
#          showlegend = F,
#          xaxis = list(title = ""),
#          updatemenus = list(
#            list(active = 0,
#                 buttons = list(
#                   list(method = "restyle",
#                        args = list("visible", append(rep(list(TRUE), 3), rep(list(FALSE), 3))),
#                        label = "Count"),
#                   list(method = "restyle",
#                        args = list("visible", append(rep(list(FALSE), 3), rep(list(TRUE), 3))),
#                        label = "Per 100K")))
#          ))
dmvDeathsByCountyBarPerCapPlotly <- DMV_Counties_Covid_Cases %>%
left_join(stateCountyPops, by = "FIPS") %>%
filter(Date == max(Date)) %>%
filter(FIPS %in% DMV_Closer_FIPS) %>%
mutate(Death_Rate_100K = (Deaths / TOTAL_POP_100K))
dmvDeathsByCountyBarPlotlyGraph <- plot_ly(dmvDeathsByCountyBarPerCapPlotly,
x = ~factor(State),
type = "bar",
color = ~factor(reorder(County, -Deaths)),
colors = pals::glasbey()) %>%
add_trace(y = ~Death_Rate_100K,
hovertemplate = paste(
"State: ", dmvDeathsByCountyBarPerCapPlotly$State,
"<br>County: ", dmvDeathsByCountyBarPerCapPlotly$County,
"<br>Deaths: ", "%{y}",
"<br>Date: ", dmvDeathsByCountyBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = F) %>%
add_trace(y = ~Deaths,
hovertemplate = paste(
"State: ", dmvDeathsByCountyBarPerCapPlotly$State,
"<br>County: ", dmvDeathsByCountyBarPerCapPlotly$County,
"<br>Deaths: ", "%{y}",
"<br>Date: ", dmvDeathsByCountyBarPerCapPlotly$Date,
"<extra></extra>"
),
visible = T) %>%
layout(#title = paste("DMV Covid-19 Cases & Case Rate by County on", Sys.Date() - 1, sep = " "),
yaxis = list(title = "Deaths"),
xaxis = list(title = ""),
showlegend = F,
updatemenus = list(
list(active = 0,
buttons = list(
list(method = "restyle",
args = list("visible", append(rep(list(T), 15), rep(list(F), 15))),
label = "Count"),
list(method = "restyle",
args = list("visible", append(rep(list(F), 15), rep(list(T), 15))),
label = "Per 100K")))
))
# dcmdvaDeathsBarPlotly <- dailySummary %>%
#   drop_na(State) %>%
#   filter(Date == max(Date)) %>%
#   left_join(stateCountyPops, by = c("State" = "STNAME")) %>%
#   filter(SUMLEV == "040") %>%
#   mutate(Death_Rate_100K = as.double((Deaths / TOTAL_POP_100K)), Deaths = as.double(Deaths))
#
#
# dmvDeathsByStateBarPlotlyGraph <- plot_ly(dcmdvaDeathsBarPlotly,
#         x = ~factor(State),
#         type = "bar",
#         color = ~factor(State),
#         colors = c("#E91436", "#ebab00ff", "#00257C")) %>%
#   add_trace(y = ~Death_Rate_100K,
#             hovertemplate = paste(
#               "State: ", dcmdvaDeathsBarPlotly$State,
#               "<br>Deaths: ", "%{y}",
#               "<br>Date: ", dcmdvaDeathsBarPlotly$Date,
#               "<extra></extra>"
#             ),
#             visible = F) %>%
#     add_trace(y = ~Deaths,
#             hovertemplate = paste(
#               "State: ", dcmdvaDeathsBarPlotly$State,
#               "<br>Deaths: ", "%{y}",
#               "<br>Date: ", dcmdvaDeathsBarPlotly$Date,
#               "<extra></extra>"
#             ),
#             visible = T) %>%
#   layout(#title = paste("DMV Covid-19 Deaths & Death Rate by State on", Sys.Date() - 1, sep = " "),
#          xaxis = list(title = ""),
#          yaxis = list(title = "Deaths"),
#          showlegend = F,
#          updatemenus = list(
#            list(active = 0,
#                 buttons = list(
#                   list(method = "restyle",
#                        args = list("visible", append(rep(list(T), 3), rep(list(F), 3))),
#                        label = "Count"),
#                   list(method = "restyle",
#                        args = list("visible", append(rep(list(F), 3), rep(list(T), 3))),
#                        label = "Per 100K")))
#          ))
Sys.sleep(5)
#### DC Hospital Data ####
dcCovid19Hospitals <- dcCovid19Hospitals %>%
filter(Resource != "Ventilators free")
dcCovidHospitalLinePlotlyGraph <- plot_ly(data = dcCovid19Hospitals, x = ~Date) %>%
add_trace(y = ~Units,
color = ~factor(Resource),
colors = pals::glasbey(),
mode = "lines+markers",
type = "scatter",
hovertemplate = paste(
"Resource: ", dcCovid19Hospitals$Resource,
"<br>Units: ", "%{y}",
"<br>Date: ", "%{x}",
"<extra></extra>"
),
visible = T) %>%
layout(xaxis = list(
type = 'date',
tickformat = "%d %B",
title = ""
),
showlegend = T)
widget_file_size <- function(p) {
d <- tempdir()
withr::with_dir(d, htmlwidgets::saveWidget(p, "index.html"))
f <- file.path(d, "index.html")
mb <- round(file.info(f)$size / 1e6, 3)
message("File is: ", mb," MB")
}
widget_file_size(dmvCasesByCountyLinePlotlyGraph)
widget_file_size(partial_bundle(dmvCasesByCountyLinePlotlyGraph))
plotlyPlots <- list(dmvDeathsByCountyBarPlotlyGraph,
dmvDeathsByCountyLinePlotlyGraph,
dmvTestsByStateBarPlotlyGraph,
dmvTestsByStateLinePlotlyGraph,
dmvCasesByCountyBarPlotlyGraph,
dmvCasesByCountyLinePlotlyGraph,
dcCovidHospitalLinePlotlyGraph)
map(plotlyPlots, partial_bundle)
widget_file_size(dmvCasesByCountyLinePlotlyGraph)
saveWidget(partial_bundle(dmvDeathsByStateBarPlotlyGraph), "dmvDeathsByStateBarPlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
Sys.sleep(5)
saveWidget(partial_bundle(dmvDeathsByStateLinePlotlyGraph), "dmvDeathsByStateLinePlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
Sys.sleep(5)
saveWidget(partial_bundle(dmvTestsByStateBarPlotlyGraph), "dmvTestsByStateBarPlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
Sys.sleep(5)
saveWidget(partial_bundle(dmvTestsByStateLinePlotlyGraph), "dmvTestsByStateLinePlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
Sys.sleep(5)
saveWidget(partial_bundle(dmvCasesByCountyBarPlotlyGraph), "dmvCasesByCountyBarPlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
Sys.sleep(5)
saveWidget(partial_bundle(dmvCasesByCountyLinePlotlyGraph), "dmvCasesByCountyLinePlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
Sys.sleep(5)
saveWidget(partial_bundle(dcCovidHospitalLinePlotlyGraph), "dcCovidHospitalLinePlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
saveWidget(partial_bundle(dmvDeathsByCountyBarPlotlyGraph), "dmvDeathsByCountyBarPlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
Sys.sleep(5)
saveWidget(partial_bundle(dmvDeathsByCountyLinePlotlyGraph), "dmvDeathsByCountyLinePlotlyGraph.html", selfcontained = F, libdir = "/home/adrian/Documents/Personal_Portfolio_Site/DMV_Covid-19")
